"""
AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è UserBot
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞–º–∏, –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è OpenAI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAIHandler
"""

import structlog
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from ..states import AISettingsStates
from ..keyboards import AIKeyboards, AdminKeyboards

logger = structlog.get_logger()

# –°–æ–∑–¥–∞–µ–º router –¥–ª—è AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

async def get_bot_config(callback_or_message, db):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è/callback"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        if hasattr(callback_or_message, 'message'):
            # CallbackQuery
            user_id = callback_or_message.from_user.id
            # –ü–æ–ª—É—á–∞–µ–º bot username —á–µ—Ä–µ–∑ API
            try:
                bot_info = await callback_or_message.bot.get_me()
                bot_username = bot_info.username
            except:
                bot_username = None
        else:
            # Message
            user_id = callback_or_message.from_user.id
            # –ü–æ–ª—É—á–∞–µ–º bot username —á–µ—Ä–µ–∑ API
            try:
                bot_info = await callback_or_message.bot.get_me()
                bot_username = bot_info.username
            except:
                bot_username = None
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –ø–æ username (–µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å) –∏–ª–∏ –∏—â–µ–º –ø–æ user_id
        bots = await db.get_user_bots(user_id)
        current_bot = None
        
        if bot_username:
            # –ò—â–µ–º –ø–æ username
            for bot in bots:
                if bot.bot_username == bot_username:
                    current_bot = bot
                    break
        
        if not current_bot and bots:
            # Fallback - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for bot in bots:
                if bot.status == 'active':
                    current_bot = bot
                    break
        
        if not current_bot and bots:
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –±–µ—Ä–µ–º –ª—é–±–æ–π –±–æ—Ç
            current_bot = bots[0]
        
        if not current_bot:
            logger.error("‚ùå Bot not found", user_id=user_id, bot_username=bot_username)
            return None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        bot_config = {
            'bot_id': current_bot.bot_id,
            'bot_username': current_bot.bot_username,
            'owner_user_id': current_bot.user_id,
            'ai_assistant_id': current_bot.openai_agent_id,
            'ai_assistant_settings': current_bot.openai_settings or {},
            'bot_manager': None,  # –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            'user_bot': None      # –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        
        logger.info("‚úÖ Bot config retrieved", 
                   bot_id=current_bot.bot_id,
                   owner_id=current_bot.user_id,
                   has_ai_agent=bool(current_bot.openai_agent_id))
        
        return bot_config
        
    except Exception as e:
        logger.error("üí• Failed to get bot config", 
                    error=str(e),
                    error_type=type(e).__name__)
        return None

def is_owner_check_factory(owner_user_id: int):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
    def is_owner_check(user_id: int) -> bool:
        return user_id == owner_user_id
    return is_owner_check

async def create_openai_handler(bot_config, db):
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ OpenAIHandler"""
    try:
        from .ai_openai_handler import OpenAIHandler
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        openai_handler = OpenAIHandler(
            db=db,
            bot_config=bot_config,
            ai_assistant=None,  # –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            user_bot=None       # –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        )
        
        logger.info("‚úÖ OpenAIHandler created", bot_id=bot_config['bot_id'])
        return openai_handler
        
    except Exception as e:
        logger.error("üí• Failed to create OpenAIHandler", 
                    error=str(e),
                    error_type=type(e).__name__)
        return None

# ===== –ö–†–ò–¢–ò–ß–ù–´–ï –†–û–£–¢–ï–†–´ –ù–ê–í–ò–ì–ê–¶–ò–ò =====

@router.callback_query(F.data.in_(["admin_panel", "admin_ai", "admin_main"]))
async def handle_navigation_callbacks(callback: CallbackQuery, state: FSMContext):
    """‚úÖ –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    logger.info("üß≠ Navigation callback received", 
               user_id=callback.from_user.id,
               callback_data=callback.data)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º db –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
        bot_config = await get_bot_config(callback, db)
        if not bot_config:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OpenAI
        openai_handler = await create_openai_handler(bot_config, db)
        if not openai_handler:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await openai_handler.handle_navigation_action(callback, state, is_owner_check)
        
        logger.info("‚úÖ Navigation handled successfully", 
                   callback_data=callback.data,
                   bot_id=bot_config['bot_id'])
        
    except Exception as e:
        logger.error("üí• Error in navigation handler", 
                    callback_data=callback.data,
                    error=str(e),
                    error_type=type(e).__name__)
        
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass

# ===== –û–¢–î–ï–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ê–î–ú–ò–ù–°–ö–û–ì–û –ó–ê–í–ï–†–®–ï–ù–ò–Ø –î–ò–ê–õ–û–ì–ê =====

@router.callback_query(F.data == "ai_exit_conversation")
async def handle_admin_ai_exit_conversation(callback: CallbackQuery, state: FSMContext):
    """‚úÖ –ù–û–í–´–ô: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ)"""
    logger.info("üö™ Admin AI exit conversation", 
               user_id=callback.from_user.id)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º db –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
        bot_config = await get_bot_config(callback, db)
        if not bot_config:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OpenAI
        openai_handler = await create_openai_handler(bot_config, db)
        if not openai_handler:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        await openai_handler.handle_exit_conversation(callback, state)
        
        logger.info("‚úÖ Admin AI conversation ended", 
                   callback_data=callback.data,
                   bot_id=bot_config['bot_id'])
        
    except Exception as e:
        logger.error("üí• Error in admin AI exit handler", 
                    error=str(e),
                    error_type=type(e).__name__)
        
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass

# ===== –†–û–£–¢–ï–†–´ OPENAI –î–ï–ô–°–¢–í–ò–ô =====

@router.callback_query(F.data.startswith("openai_"))
async def handle_openai_callbacks(callback: CallbackQuery, state: FSMContext):
    """‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ OpenAI –¥–µ–π—Å—Ç–≤–∏–π + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ confirm_delete"""
    logger.info("üé® OpenAI callback received", 
               user_id=callback.from_user.id,
               callback_data=callback.data)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º db –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–æ—Ç–∞
        bot_config = await get_bot_config(callback, db)
        if not bot_config:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ OpenAI
        openai_handler = await create_openai_handler(bot_config, db)
        if not openai_handler:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞", show_alert=True)
            return
        
        # ‚úÖ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê confirm_delete
        if callback.data == "openai_confirm_delete":
            await openai_handler.handle_confirm_delete(callback, is_owner_check)
        else:
            # –û–±—ã—á–Ω—ã–µ OpenAI –¥–µ–π—Å—Ç–≤–∏—è
            await openai_handler.handle_openai_action(callback, state, is_owner_check)
        
        logger.info("‚úÖ OpenAI action handled successfully", 
                   callback_data=callback.data,
                   bot_id=bot_config['bot_id'])
        
    except Exception as e:
        logger.error("üí• Error in OpenAI handler", 
                    callback_data=callback.data,
                    error=str(e),
                    error_type=type(e).__name__)
        
        try:
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except:
            pass

# ===== –û–°–ù–û–í–ù–´–ï AI –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

@router.callback_query(F.data == "admin_ai")
async def handle_ai_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò (–¥—É–±–ª–∏—Ä—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    logger.info("ü§ñ AI settings callback", 
               user_id=callback.from_user.id)
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await handle_navigation_callbacks(callback, state)

@router.callback_query(F.data == "ai_create_assistant")
async def handle_create_assistant(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)"""
    logger.info("üé® Create assistant callback", 
               user_id=callback.from_user.id)
    
    try:
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        bot_config = await get_bot_config(callback, db)
        if not bot_config:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ OpenAI)
        text = """
üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üß† OpenAI GPT-4o (Responses API)", callback_data="openai_create")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error("üí• Error in create assistant", error=str(e))
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò FSM –°–û–°–¢–û–Ø–ù–ò–ô =====

@router.message(StateFilter(AISettingsStates.waiting_for_openai_name))
async def handle_openai_name_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ OpenAI –∞–≥–µ–Ω—Ç–∞"""
    logger.info("üìù OpenAI name input received", 
               user_id=message.from_user.id,
               input_length=len(message.text))
    
    try:
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        bot_config = await get_bot_config(message, db)
        if not bot_config:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        openai_handler = await create_openai_handler(bot_config, db)
        if not openai_handler:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
            return
        
        await openai_handler.handle_name_input(message, state, is_owner_check)
        
    except Exception as e:
        logger.error("üí• Error in name input handler", error=str(e))
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏")

@router.message(StateFilter(AISettingsStates.waiting_for_openai_role))
async def handle_openai_role_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ–ª–∏ OpenAI –∞–≥–µ–Ω—Ç–∞"""
    logger.info("üìù OpenAI role input received", 
               user_id=message.from_user.id,
               input_length=len(message.text))
    
    try:
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        bot_config = await get_bot_config(message, db)
        if not bot_config:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        openai_handler = await create_openai_handler(bot_config, db)
        if not openai_handler:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
            return
        
        await openai_handler.handle_role_input(message, state, is_owner_check)
        
    except Exception as e:
        logger.error("üí• Error in role input handler", error=str(e))
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ–ª–∏")

@router.message(StateFilter(AISettingsStates.editing_agent_name))
async def handle_agent_name_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞"""
    logger.info("‚úèÔ∏è Agent name edit received", 
               user_id=message.from_user.id,
               input_length=len(message.text))
    
    try:
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        bot_config = await get_bot_config(message, db)
        if not bot_config:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        openai_handler = await create_openai_handler(bot_config, db)
        if not openai_handler:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
            return
        
        await openai_handler.handle_name_edit_input(message, state, is_owner_check)
        
    except Exception as e:
        logger.error("üí• Error in name edit handler", error=str(e))
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–º–µ–Ω–∏")

@router.message(StateFilter(AISettingsStates.editing_agent_prompt))
async def handle_agent_prompt_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
    logger.info("üé≠ Agent prompt edit received", 
               user_id=message.from_user.id,
               input_length=len(message.text))
    
    try:
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        bot_config = await get_bot_config(message, db)
        if not bot_config:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        openai_handler = await create_openai_handler(bot_config, db)
        if not openai_handler:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
            return
        
        await openai_handler.handle_prompt_edit_input(message, state, is_owner_check)
        
    except Exception as e:
        logger.error("üí• Error in prompt edit handler", error=str(e))
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞")

@router.message(StateFilter(AISettingsStates.in_ai_conversation))
async def handle_ai_conversation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò –∞–≥–µ–Ω—Ç–æ–º"""
    logger.info("üí¨ AI conversation message received", 
               user_id=message.from_user.id,
               message_length=len(message.text))
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
        if message.text in ['/exit', '/stop', '/cancel']:
            await state.clear()
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ])
            
            await message.answer(
                "üö™ –î–∏–∞–ª–æ–≥ —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω",
                reply_markup=keyboard
            )
            return
        
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        bot_config = await get_bot_config(message, db)
        if not bot_config:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        if not is_owner_check(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        agent_type = data.get('agent_type', 'openai')
        
        if agent_type == 'openai':
            openai_handler = await create_openai_handler(bot_config, db)
            if not openai_handler:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ OpenAI")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            await message.bot.send_chat_action(message.chat.id, "typing")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
            response = await openai_handler.handle_openai_conversation(message, data)
            
            if response:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ë–ï–ó –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
                ])
                
                await message.answer(response, reply_markup=keyboard)
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
        else:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞")
            
    except Exception as e:
        logger.error("üí• Error in AI conversation", 
                    error=str(e),
                    error_type=type(e).__name__)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò")

# ===== –û–ë–©–ò–ï AI –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

@router.callback_query(F.data == "ai_toggle_status")
async def handle_toggle_ai_status(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ò–ò"""
    logger.info("üîÑ Toggle AI status", user_id=callback.from_user.id)
    
    try:
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        bot_config = await get_bot_config(callback, db)
        if not bot_config:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å AI
        fresh_bot = await db.get_bot_by_id(bot_config['bot_id'], fresh=True)
        if not fresh_bot:
            await callback.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        new_status = not fresh_bot.ai_assistant_enabled
        
        success = await db.update_ai_assistant(
            bot_config['bot_id'],
            enabled=new_status
        )
        
        if success:
            status_text = "–≤–∫–ª—é—á–µ–Ω" if new_status else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await callback.answer(f"‚úÖ –ò–ò {status_text}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            openai_handler = await create_openai_handler(bot_config, db)
            if openai_handler:
                await openai_handler.show_settings(callback, has_ai_agent=new_status)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
            
    except Exception as e:
        logger.error("üí• Error toggling AI status", error=str(e))
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "ai_stats")
async def handle_ai_stats(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–ò"""
    logger.info("üìä AI stats requested", user_id=callback.from_user.id)
    
    try:
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        bot_config = await get_bot_config(callback, db)
        if not bot_config:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        fresh_bot = await db.get_bot_by_id(bot_config['bot_id'], fresh=True)
        if not fresh_bot:
            await callback.answer("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        input_tokens = fresh_bot.tokens_used_input or 0
        output_tokens = fresh_bot.tokens_used_output or 0
        total_tokens = fresh_bot.tokens_used_total or 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        has_tokens, user_tokens_used, user_tokens_limit = await db.check_token_limit(fresh_bot.user_id)
        
        text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò</b>

<b>ü§ñ –ë–æ—Ç:</b> @{fresh_bot.bot_username}
<b>üß† –¢–∏–ø –ò–ò:</b> {fresh_bot.ai_assistant_type or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
<b>üîÑ –°—Ç–∞—Ç—É—Å:</b> {'–í–∫–ª—é—á–µ–Ω' if fresh_bot.ai_assistant_enabled else '–í—ã–∫–ª—é—á–µ–Ω'}

<b>üìà –¢–æ–∫–µ–Ω—ã –±–æ—Ç–∞:</b>
‚Ä¢ –í—Ö–æ–¥—è—â–∏–µ: {input_tokens:,}
‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–µ: {output_tokens:,}
‚Ä¢ –í—Å–µ–≥–æ: {total_tokens:,}

<b>üë§ –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_tokens_used:,}
‚Ä¢ –õ–∏–º–∏—Ç: {user_tokens_limit:,}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {user_tokens_limit - user_tokens_used:,}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞' if has_tokens else '‚ùå –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω'}
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="ai_stats")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error("üí• Error showing AI stats", error=str(e))
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "ai_diagnosis")
async def handle_ai_diagnosis(callback: CallbackQuery, state: FSMContext):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ò–ò"""
    logger.info("üîç AI diagnosis requested", user_id=callback.from_user.id)
    
    try:
        from database.connection import DatabaseManager
        db = DatabaseManager()
        
        bot_config = await get_bot_config(callback, db)
        if not bot_config:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        is_owner_check = is_owner_check_factory(bot_config['owner_user_id'])
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        diagnosis = await db.diagnose_ai_config(bot_config['bot_id'])
        
        status_emoji = {
            'configured': '‚úÖ',
            'disabled': '‚ö†Ô∏è',
            'incomplete': 'üîß',
            'misconfigured': '‚ùå',
            'not_configured': '‚ùì'
        }
        
        text = f"""
üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ò–ò –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>

<b>üéØ –°—Ç–∞—Ç—É—Å:</b> {status_emoji.get(diagnosis['status'], '‚ùì')} {diagnosis['status']}
<b>ü§ñ –ë–æ—Ç ID:</b> {diagnosis['bot_id']}

<b>üìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ AI –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if diagnosis['ai_assistant_enabled'] else '‚ùå'}
‚Ä¢ –¢–∏–ø AI: {diagnosis['ai_assistant_type'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

<b>üß† OpenAI:</b>
‚Ä¢ Agent ID: {'‚úÖ' if diagnosis['fields']['openai']['agent_id'] else '‚ùå'}
‚Ä¢ –ò–º—è –∞–≥–µ–Ω—Ç–∞: {'‚úÖ' if diagnosis['fields']['openai']['agent_name'] else '‚ùå'}
‚Ä¢ –ú–æ–¥–µ–ª—å: {diagnosis['fields']['openai']['model'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}

<b>üîß –í–Ω–µ—à–Ω–∏–π AI:</b>
‚Ä¢ API —Ç–æ–∫–µ–Ω: {'‚úÖ' if diagnosis['fields']['external']['api_token'] else '‚ùå'}
‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {diagnosis['fields']['external']['platform'] or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
"""
        
        if diagnosis['issues']:
            text += f"\n<b>‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
            for issue in diagnosis['issues']:
                text += f"‚Ä¢ {issue}\n"
        
        if diagnosis['config_result']:
            result_emoji = '‚úÖ' if diagnosis['config_result'] == 'success' else '‚ùå'
            text += f"\n<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b> {result_emoji} {diagnosis['config_result']}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", callback_data="ai_diagnosis")],
            [InlineKeyboardButton(text="üîß –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="openai_sync_data")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error("üí• Error in AI diagnosis", error=str(e))
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# ===== –§–£–ù–ö–¶–ò–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====

def register_ai_handlers(dp, **kwargs):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è AI –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    logger.info("üîß Registering AI handlers", 
               extra_kwargs=list(kwargs.keys()))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("‚úÖ AI handlers registered with full navigation support")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.info("üìã Registered AI callback handlers", 
               callback_handlers=[
                   "navigation: admin_panel, admin_ai, admin_main",
                   "ai_exit_conversation: separate admin exit handler",
                   "openai_*: all OpenAI actions including confirm_delete",
                   "ai_create_assistant: assistant creation",
                   "ai_toggle_status: enable/disable AI",
                   "ai_stats: usage statistics",
                   "ai_diagnosis: configuration diagnosis"
               ])
    
    logger.info("üìã Registered AI message handlers",
               message_handlers=[
                   "waiting_for_openai_name: agent name input",
                   "waiting_for_openai_role: agent role input", 
                   "editing_agent_name: agent name editing",
                   "editing_agent_prompt: agent prompt editing",
                   "in_ai_conversation: AI conversation handling"
               ])
