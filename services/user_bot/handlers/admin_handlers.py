"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import structlog
from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove

from config import Emoji
from ..keyboards import AdminKeyboards
from ..formatters import MessageFormatter
from ..states import ChannelStates

logger = structlog.get_logger()


def register_admin_handlers(dp: Dispatcher, **kwargs):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    db = kwargs['db']
    bot_config = kwargs['bot_config']
    funnel_manager = kwargs['funnel_manager']
    user_bot = kwargs.get('user_bot')
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        handler = AdminHandler(db, bot_config, funnel_manager, user_bot)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        dp.message.register(handler.cmd_start, CommandStart())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.callback_query.register(handler.cb_admin_main, F.data == "admin_main")
        dp.callback_query.register(handler.cb_admin_settings, F.data == "admin_settings")
        dp.callback_query.register(handler.cb_admin_funnel, F.data == "admin_funnel")
        dp.callback_query.register(handler.cb_admin_stats, F.data == "admin_stats")
        dp.callback_query.register(handler.cb_admin_tokens, F.data == "admin_tokens")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        dp.callback_query.register(handler.cb_subscription_settings, F.data == "admin_subscription")
        dp.callback_query.register(handler.cb_toggle_subscription, F.data == "toggle_subscription")
        dp.callback_query.register(handler.cb_set_subscription_channel, F.data == "set_subscription_channel")
        dp.callback_query.register(handler.cb_edit_subscription_message, F.data == "edit_subscription_message")
        
        # FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        dp.message.register(
            handler.handle_forwarded_channel, 
            ChannelStates.waiting_for_subscription_channel
        )
        
        # Debug handler
        dp.message.register(handler.debug_owner_message, F.text == "test")
        
        logger.info("Admin handlers registered successfully", 
                   bot_id=bot_config['bot_id'], 
                   owner_id=bot_config['owner_user_id'])
        
    except Exception as e:
        logger.error("Failed to register admin handlers", 
                    bot_id=kwargs.get('bot_config', {}).get('bot_id', 'unknown'),
                    error=str(e), exc_info=True)
        raise


class AdminHandler:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    def __init__(self, db, bot_config: dict, funnel_manager, user_bot):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        self.funnel_manager = funnel_manager
        self.formatter = MessageFormatter()
        self.user_bot = user_bot
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.stats = bot_config.get('stats', {})
    
    async def _get_fresh_config(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ–∂–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î"""
        try:
            fresh_config = await self.db.get_bot_full_config(self.bot_id, fresh=True)
            
            if fresh_config:
                logger.debug("‚úÖ Fresh config loaded", 
                           bot_id=self.bot_id,
                           subscription_enabled=fresh_config.get('subscription_check_enabled', False))
                return fresh_config
            else:
                logger.warning("‚ùå Failed to load fresh config, using cached", bot_id=self.bot_id)
                return self.bot_config
                
        except Exception as e:
            logger.error("‚ùå Error loading fresh config", bot_id=self.bot_id, error=str(e))
            return self.bot_config
    
    def _format_number(self, number: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (22 500)"""
        return f"{number:,}".replace(",", " ")
    
    def _format_percentage(self, used: int, limit: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        if limit <= 0:
            return "0%"
        percentage = (used / limit) * 100
        return f"{percentage:.1f}%"
    
    async def _get_token_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ OpenAI"""
        try:
            token_balance = await self.db.get_user_token_balance(self.owner_user_id)
            
            logger.debug("üí∞ Token balance retrieved", 
                        user_id=self.owner_user_id,
                        total_used=token_balance.get('total_used', 0),
                        limit=token_balance.get('limit', 0),
                        bots_count=token_balance.get('bots_count', 0))
            
            return {
                'has_openai_bots': token_balance.get('bots_count', 0) > 0,
                'total_used': token_balance.get('total_used', 0),
                'input_tokens': token_balance.get('input_tokens', 0),
                'output_tokens': token_balance.get('output_tokens', 0),
                'limit': token_balance.get('limit', 500000),
                'remaining': token_balance.get('remaining', 500000),
                'percentage_used': token_balance.get('percentage_used', 0.0),
                'bots_count': token_balance.get('bots_count', 0),
                'last_usage_at': token_balance.get('last_usage_at')
            }
            
        except Exception as e:
            logger.error("üí• Failed to get token stats", 
                        user_id=self.owner_user_id,
                        error=str(e),
                        error_type=type(e).__name__)
            
            return {
                'has_openai_bots': False,
                'total_used': 0,
                'input_tokens': 0,
                'output_tokens': 0,
                'limit': 500000,
                'remaining': 500000,
                'percentage_used': 0.0,
                'bots_count': 0,
                'last_usage_at': None
            }
    
    async def _get_subscription_enabled(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)"""
        try:
            config = await self._get_fresh_config()
            enabled = config.get('subscription_check_enabled', False)
            
            logger.debug("üîç Subscription status checked", 
                        bot_id=self.bot_id,
                        enabled=enabled)
            
            return enabled
            
        except Exception as e:
            logger.error("‚ùå Failed to get subscription status", bot_id=self.bot_id, error=str(e))
            return False

    async def _get_subscription_enabled_fresh(self) -> bool:
        """‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            enabled, _ = await self.db.get_subscription_status_no_cache(self.bot_id)
            
            logger.debug("üî• AGGRESSIVE subscription status checked", 
                        bot_id=self.bot_id,
                        enabled=enabled)
            return enabled
            
        except Exception as e:
            logger.error("‚ùå Failed to get aggressive subscription status", bot_id=self.bot_id, error=str(e))
            return False
    
    async def _get_subscription_channel_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)"""
        try:
            config = await self._get_fresh_config()
            
            return {
                'channel_id': config.get('subscription_channel_id'),
                'channel_username': config.get('subscription_channel_username'),
                'deny_message': config.get('subscription_deny_message', '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.')
            }
            
        except Exception as e:
            logger.error("‚ùå Failed to get channel info", bot_id=self.bot_id, error=str(e))
            return {
                'channel_id': None,
                'channel_username': None,
                'deny_message': '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.'
            }

    async def _get_subscription_channel_info_fresh(self) -> dict:
        """‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            _, channel_info = await self.db.get_subscription_status_no_cache(self.bot_id)
            
            logger.debug("üî• AGGRESSIVE channel info retrieved", 
                        bot_id=self.bot_id,
                        has_channel=bool(channel_info.get('channel_id')))
            return channel_info
            
        except Exception as e:
            logger.error("‚ùå Failed to get aggressive channel info", bot_id=self.bot_id, error=str(e))
            return {
                'channel_id': None,
                'channel_username': None,
                'deny_message': '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.'
            }
    
    async def _get_content_agent_info(self) -> tuple[str, bool]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–µ"""
        has_content_agent = False
        content_agent_status = "‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω"
        
        try:
            agent_info = await self.db.get_content_agent(self.bot_id)
            
            if agent_info and not agent_info.get('deleted_at'):
                has_content_agent = True
                agent_name = agent_info.get('agent_name', '–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç')
                
                if agent_info.get('openai_agent_id'):
                    content_agent_status = f"‚úÖ {agent_name}"
                else:
                    content_agent_status = f"‚ö†Ô∏è {agent_name} (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
                    
                logger.debug("üìù Content agent found", 
                           bot_id=self.bot_id,
                           agent_name=agent_name,
                           has_openai_id=bool(agent_info.get('openai_agent_id')))
            else:
                logger.debug("üìù No content agent found", bot_id=self.bot_id)
                
        except Exception as e:
            logger.warning("üìù Failed to check content agent", 
                         bot_id=self.bot_id,
                         error=str(e))
            content_agent_status = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
        
        return content_agent_status, has_content_agent
    
    def _is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º"""
        is_owner = user_id == self.owner_user_id
        logger.debug("Owner check", 
                    bot_id=self.bot_id,
                    user_id=user_id, 
                    owner_user_id=self.owner_user_id, 
                    is_owner=is_owner)
        return is_owner
    
    def _has_ai_agent(self, config: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ò–ò –∞–≥–µ–Ω—Ç–∞"""
        has_agent = bool(config.get('ai_assistant_id'))
        logger.debug("AI agent check", 
                    bot_id=self.bot_id,
                    has_agent=has_agent,
                    ai_assistant_id_exists=bool(config.get('ai_assistant_id')))
        return has_agent
    
    def _get_ai_agent_info(self, config: dict) -> tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –ò–ò –∞–≥–µ–Ω—Ç–µ"""
        if not self._has_ai_agent(config):
            return "‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω", "none"
        
        ai_settings = config.get('ai_assistant_settings', {})
        agent_type = ai_settings.get('agent_type', 'unknown')
        
        if agent_type == 'chatforyou':
            platform = ai_settings.get('detected_platform', 'unknown')
            if platform == 'chatforyou':
                bot_id_configured = bool(ai_settings.get('chatforyou_bot_id'))
                if bot_id_configured:
                    return "‚úÖ ChatForYou –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "chatforyou"
                else:
                    return "‚ö†Ô∏è ChatForYou (–Ω–µ–ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)", "chatforyou_partial"
            elif platform == 'protalk':
                return "‚úÖ ProTalk –Ω–∞—Å—Ç—Ä–æ–µ–Ω", "protalk"
            else:
                return "‚ö†Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞", "unknown_platform"
        
        elif agent_type == 'openai':
            agent_name = ai_settings.get('agent_name', 'OpenAI –∞–≥–µ–Ω—Ç')
            creation_method = ai_settings.get('creation_method', 'unknown')
            
            if creation_method == 'real_openai_api':
                return f"‚úÖ {agent_name} (OpenAI)", "openai"
            elif creation_method == 'fallback_stub':
                return f"‚ö†Ô∏è {agent_name} (—Ç–µ—Å—Ç–æ–≤—ã–π)", "openai_stub"
            else:
                return f"‚úÖ {agent_name} (OpenAI)", "openai"
        
        else:
            return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø", "unknown"
    
    async def _get_admin_welcome_text(self) -> str:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å fresh data"""
        config = await self._get_fresh_config()
        
        total_sent = (self.stats.get('welcome_sent', 0) + 
                     self.stats.get('goodbye_sent', 0) + 
                     self.stats.get('confirmation_sent', 0))
        
        has_welcome = bool(config.get('welcome_message'))
        has_welcome_button = bool(config.get('welcome_button_text'))
        has_confirmation = bool(config.get('confirmation_message'))
        has_goodbye = bool(config.get('goodbye_message'))
        has_goodbye_button = bool(config.get('goodbye_button_text') and config.get('goodbye_button_url'))
        
        ai_status, ai_type = self._get_ai_agent_info(config)
        token_stats = await self._get_token_stats()
        content_agent_status, has_content_agent = await self._get_content_agent_info()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º FRESH –º–µ—Ç–æ–¥—ã –≤–º–µ—Å—Ç–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        subscription_enabled = await self._get_subscription_enabled_fresh()
        subscription_status = "üü¢ –í–∫–ª—é—á–µ–Ω–∞" if subscription_enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤
        token_section = ""
        if token_stats['has_openai_bots']:
            used_formatted = self._format_number(token_stats['total_used'])
            limit_formatted = self._format_number(token_stats['limit'])
            percentage = self._format_percentage(token_stats['total_used'], token_stats['limit'])
            
            if token_stats['percentage_used'] >= 90:
                token_emoji = "üî¥"
            elif token_stats['percentage_used'] >= 70:
                token_emoji = "üü°"
            else:
                token_emoji = "üí∞"
            
            token_section = f"\n{token_emoji} <b>–¢–æ–∫–µ–Ω—ã OpenAI:</b> {used_formatted} / {limit_formatted} ({percentage})"
            
        base_text = f"""
{Emoji.ROBOT} <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å @{self.bot_username or 'bot'}</b>

{Emoji.SUCCESS} <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω
{Emoji.MESSAGE} <b>–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {total_sent}
{Emoji.BUTTON} <b>–ö–Ω–æ–ø–æ–∫ –Ω–∞–∂–∞—Ç–æ:</b> {self.stats.get('button_clicks', 0)}
{Emoji.FUNNEL} <b>–í–æ—Ä–æ–Ω–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ:</b> {self.stats.get('funnel_starts', 0)}{token_section}

{Emoji.INFO} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {'‚úÖ' if has_welcome else '‚ùå'}
- –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {'‚úÖ' if has_welcome_button else '‚ùå'}
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {'‚úÖ' if has_confirmation else '‚ùå'}
- –ü—Ä–æ—â–∞–Ω–∏–µ: {'‚úÖ' if has_goodbye else '‚ùå'}
- –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—â–∞–Ω–∏—è: {'‚úÖ' if has_goodbye_button else '‚ùå'}

ü§ñ <b>–ò–ò –ê–≥–µ–Ω—Ç:</b> {ai_status}
üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç:</b> {content_agent_status}
üîí <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
"""
        
        return base_text
    
    async def cmd_start(self, message: Message, state: FSMContext):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            await state.clear()
            
            user_id = message.from_user.id
            
            if not self._is_owner(user_id):
                logger.debug("Non-owner user accessed /start", 
                            bot_id=self.bot_id, 
                            user_id=user_id,
                            username=message.from_user.username)
                
                await message.answer(
                    f"üëã –≠—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π –±–æ—Ç –∫–∞–Ω–∞–ª–∞.\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return
            
            admin_text = await self._get_admin_welcome_text()
            token_stats = await self._get_token_stats()
            keyboard = AdminKeyboards.main_menu(has_openai_bots=token_stats['has_openai_bots'])
            
            await message.answer(
                admin_text,
                reply_markup=keyboard
            )
            
            logger.info("‚úÖ Owner accessed admin panel", 
                       bot_id=self.bot_id, 
                       owner_user_id=user_id,
                       bot_username=self.bot_username,
                       has_openai_bots=token_stats['has_openai_bots'])
                       
        except Exception as e:
            logger.error("Error in cmd_start", bot_id=self.bot_id, error=str(e), exc_info=True)
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
                reply_markup=ReplyKeyboardRemove()
            )
    
    async def cb_admin_main(self, callback: CallbackQuery, state: FSMContext):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
        await callback.answer()
        await state.clear()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        admin_text = await self._get_admin_welcome_text()
        token_stats = await self._get_token_stats()
        keyboard = AdminKeyboards.main_menu(has_openai_bots=token_stats['has_openai_bots'])
        
        await callback.message.edit_text(
            admin_text,
            reply_markup=keyboard
        )
        
        logger.debug("‚úÖ Admin main menu refreshed", 
                    bot_id=self.bot_id,
                    has_openai_bots=token_stats['has_openai_bots'])
    
    async def cb_admin_settings(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        config = await self._get_fresh_config()
        
        welcome_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if config.get('welcome_message') else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        welcome_button_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if config.get('welcome_button_text') else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        confirmation_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if config.get('confirmation_message') else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        goodbye_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if config.get('goodbye_message') else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        goodbye_button_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" if (config.get('goodbye_button_text') and config.get('goodbye_button_url')) else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        text = f"""
{Emoji.SETTINGS} <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ @{self.bot_username or 'bot'}</b>

{Emoji.INFO} <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b>
   –°–æ–æ–±—â–µ–Ω–∏–µ: {welcome_status}
   –ö–Ω–æ–ø–∫–∞: {welcome_button_status}
   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {confirmation_status}

{Emoji.INFO} <b>–ü—Ä–æ—â–∞–Ω–∏–µ:</b>
   –°–æ–æ–±—â–µ–Ω–∏–µ: {goodbye_status}
   –ö–Ω–æ–ø–∫–∞: {goodbye_button_status}

{Emoji.ROCKET} <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ ‚Üí –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–Ω–æ–ø–∫–∞
2. –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ‚Üí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + –∑–∞–ø—É—Å–∫ –≤–æ—Ä–æ–Ω–∫–∏ 
3. –í—ã—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Üí –ü—Ä–æ—â–∞–Ω–∏–µ + –∫–Ω–æ–ø–∫–∞ —Å —Å—Å—ã–ª–∫–æ–π
"""
        
        await callback.message.edit_text(
            text,
            reply_markup=AdminKeyboards.settings_menu()
        )
        
        logger.debug("‚úÖ Admin settings displayed", 
                   bot_id=self.bot_id,
                   welcome_configured=bool(config.get('welcome_message')),
                   welcome_button_configured=bool(config.get('welcome_button_text')))
    
    async def cb_admin_funnel(self, callback: CallbackQuery):
        """–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        from .funnel_handlers import show_funnel_main_menu
        await show_funnel_main_menu(callback, self.bot_id, self.bot_username, self.funnel_manager)
    
    async def cb_admin_stats(self, callback: CallbackQuery):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await self._show_bot_stats(callback)
    
    async def cb_admin_tokens(self, callback: CallbackQuery):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ OpenAI"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await self._show_token_stats(callback)
    
    # ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–î–ü–ò–°–ö–ò
    
    async def cb_subscription_settings(self, callback: CallbackQuery):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å fresh data"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        # ‚úÖ –°–¢–ê–¢–ò–ß–ù–´–ô –¢–ï–ö–°–¢ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
        text = """
üîí <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò</b>

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–º–µ—Ç "ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò"
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
‚Ä¢ –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
‚Ä¢ –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ò–ò

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
2. –í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>
"""
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º FRESH –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        keyboard = await self._get_subscription_keyboard(force_fresh=True)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
        logger.debug("‚úÖ Subscription settings displayed with fresh data", bot_id=self.bot_id)
    
    async def _get_subscription_keyboard(self, force_fresh: bool = False):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ–ø—Ü–∏–µ–π fresh data"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if force_fresh:
            enabled = await self._get_subscription_enabled_fresh()
            channel_info = await self._get_subscription_channel_info_fresh()
        else:
            enabled = await self._get_subscription_enabled()
            channel_info = await self._get_subscription_channel_info()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        if enabled:
            toggle_button = InlineKeyboardButton(
                text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", 
                callback_data="toggle_subscription"
            )
        else:
            toggle_button = InlineKeyboardButton(
                text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", 
                callback_data="toggle_subscription"
            )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ (—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è)
        if channel_info['channel_id']:
            channel_button_text = "üì∫ –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚úÖ"
        else:
            channel_button_text = "üì∫ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª"
        
        channel_button = InlineKeyboardButton(
            text=channel_button_text,
            callback_data="set_subscription_channel"
        )
        
        keyboard_buttons = [
            [toggle_button],
            [channel_button],
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="edit_subscription_message")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    async def cb_toggle_subscription(self, callback: CallbackQuery):
        """‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
            current_enabled = await self._get_subscription_enabled_fresh()
            new_enabled = not current_enabled
            
            logger.info("üîÑ AGGRESSIVE toggle subscription", 
                       bot_id=self.bot_id,
                       current_enabled=current_enabled,
                       new_enabled=new_enabled)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            result = await self.db.update_subscription_settings(
                self.bot_id,
                enabled=new_enabled
            )
            
            if isinstance(result, dict) and not result.get('success', True):
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
                return
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            verification_success = await self.db.verify_update_success(self.bot_id, new_enabled)
            
            if not verification_success:
                logger.error("üí• Update verification FAILED", 
                            bot_id=self.bot_id,
                            expected=new_enabled)
                await callback.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", show_alert=True)
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ
            status = "–≤–∫–ª—é—á–µ–Ω–∞" if new_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
            await callback.answer(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {status}")
            
            logger.info("‚úÖ AGGRESSIVE subscription toggle SUCCESS", 
                       bot_id=self.bot_id,
                       enabled=new_enabled,
                       verified=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            try:
                new_keyboard = await self._get_subscription_keyboard(force_fresh=True)
                await callback.message.edit_reply_markup(reply_markup=new_keyboard)
                
            except Exception as update_error:
                error_message = str(update_error).lower()
                
                if "message is not modified" in error_message:
                    # Fallback: –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    from datetime import datetime
                    update_time = datetime.now().strftime("%H:%M:%S")
                    
                    status_indicator = "üü¢ –í–∫–ª—é—á–µ–Ω–∞" if new_enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞"
                    
                    text = f"""
üîí <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò</b>

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–º–µ—Ç "ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò"
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
‚Ä¢ –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
‚Ä¢ –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω - –∑–∞–ø—É—Å–∫–∞–µ—Ç –ò–ò

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
2. –í–∫–ª—é—á–∏—Ç–µ/–≤—ã–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_indicator} ‚úÖ

<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}</i>
"""
                    
                    await callback.message.edit_text(text, reply_markup=new_keyboard)
                else:
                    raise update_error
            
        except Exception as e:
            logger.error("‚ùå AGGRESSIVE toggle subscription FAILED", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
    
    async def cb_set_subscription_channel(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await state.set_state(ChannelStates.waiting_for_subscription_channel)
        
        text = """
üì∫ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏</b>

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≤–∞—à –∫–∞–Ω–∞–ª
2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç
3. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç ID –∫–∞–Ω–∞–ª–∞

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º –∏–ª–∏ –∏–º–µ—Ç—å username
‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏)

<i>–û–∂–∏–¥–∞—é –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</i>
"""
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_subscription")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        
        logger.info("‚úÖ Waiting for forwarded channel message", 
                   bot_id=self.bot_id,
                   user_id=callback.from_user.id)
    
    async def handle_forwarded_channel(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            user_id = message.from_user.id
            
            if not self._is_owner(user_id):
                await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                await state.clear()
                return
            
            if not message.forward_from_chat:
                await message.answer(
                    "‚ùå –≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞."
                )
                return
            
            if message.forward_from_chat.type != "channel":
                await message.answer(
                    "‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª!\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞."
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
            channel_id = message.forward_from_chat.id
            channel_title = message.forward_from_chat.title
            channel_username = message.forward_from_chat.username
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            result = await self.db.update_subscription_settings(
                self.bot_id,
                channel_id=channel_id,
                channel_username=channel_username
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(result, dict) and not result.get('success', True):
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞")
                await state.clear()
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            channel_info = f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel_title}\n"
            channel_info += f"<b>ID:</b> <code>{channel_id}</code>\n"
            if channel_username:
                channel_info += f"<b>Username:</b> @{channel_username}"
            else:
                channel_info += f"<b>Username:</b> –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            success_text = f"""
‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>

{channel_info}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
2. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<i>–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—É–¥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É.</i>
"""
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="toggle_subscription")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_subscription")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ])
            
            await message.answer(success_text, reply_markup=keyboard)
            await state.clear()
            
            logger.info("‚úÖ Subscription channel configured successfully", 
                       bot_id=self.bot_id,
                       channel_id=channel_id,
                       channel_title=channel_title,
                       channel_username=channel_username)
                       
        except Exception as e:
            logger.error("‚ùå Failed to handle forwarded channel", 
                        bot_id=self.bot_id,
                        error=str(e),
                        exc_info=True)
            
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–Ω–∞–ª–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )
            await state.clear()
    
    async def cb_edit_subscription_message(self, callback: CallbackQuery, state: FSMContext):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        await callback.answer("üöß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
    
    async def _show_bot_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        try:
            stats = await self.db.get_bot_statistics(self.bot_id)
            
            text = f"""
{Emoji.CHART} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ @{self.bot_username or 'bot'}</b>

{Emoji.ROBOT} <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b>
   –ê–∫—Ç–∏–≤–µ–Ω

{Emoji.USERS} <b>–°–æ–æ–±—â–µ–Ω–∏—è:</b>
   –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π: {stats.get('welcome_sent', 0)}
   –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {stats.get('confirmation_sent', 0)}
   –ü—Ä–æ—â–∞–Ω–∏–π: {stats.get('goodbye_sent', 0)}
   
{Emoji.BUTTON} <b>–ö–Ω–æ–ø–∫–∏:</b>
   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {stats.get('welcome_buttons_sent', 0)}
   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—â–∞–ª—å–Ω—ã—Ö: {stats.get('goodbye_buttons_sent', 0)}
   –ù–∞–∂–∞—Ç–∏–π: {stats.get('button_clicks', 0)}
   
{Emoji.FUNNEL} <b>–í–æ—Ä–æ–Ω–∫–∏:</b>
   –ó–∞–ø—É—â–µ–Ω–æ: {stats.get('funnel_starts', 0)}
   
{Emoji.FIRE} <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
   –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {stats.get('join_requests_processed', 0)}
   –ê–¥–º–∏–Ω—Å–∫–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏–π: {stats.get('admin_adds_processed', 0)}

{Emoji.INFO} <i>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>
"""
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data="admin_stats"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="admin_main"
                    )
                ]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("Failed to show bot stats", bot_id=self.bot_id, error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
    
    async def _show_token_stats(self, callback: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤ OpenAI"""
        try:
            logger.info("üìä Loading token statistics", 
                       user_id=self.owner_user_id,
                       bot_id=self.bot_id)
            
            token_stats = await self._get_token_stats()
            
            logger.debug("üí∞ Token stats loaded", 
                        has_openai_bots=token_stats['has_openai_bots'],
                        total_used=token_stats['total_used'],
                        bots_count=token_stats['bots_count'])
            
            if not token_stats['has_openai_bots']:
                text = f"""
üí∞ <b>–¢–æ–∫–µ–Ω—ã OpenAI</b>

‚ùå <b>OpenAI –∞–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö OpenAI –∞–≥–µ–Ω—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É —Ç–æ–∫–µ–Ω—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.

<b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ OpenAI –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "ü§ñ –ò–ò –ê–≥–µ–Ω—Ç"
2. –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—Å—Ç –≤–∞–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç –∏–∑ 500,000 —Ç–æ–∫–µ–Ω–æ–≤
3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

{Emoji.INFO} <i>–¢–æ–∫–µ–Ω—ã –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö OpenAI –∞–≥–µ–Ω—Ç–æ–≤</i>
"""
            else:
                used_formatted = self._format_number(token_stats['total_used'])
                limit_formatted = self._format_number(token_stats['limit'])
                remaining_formatted = self._format_number(token_stats['remaining'])
                input_formatted = self._format_number(token_stats['input_tokens'])
                output_formatted = self._format_number(token_stats['output_tokens'])
                percentage = self._format_percentage(token_stats['total_used'], token_stats['limit'])
                
                if token_stats['percentage_used'] >= 90:
                    status_emoji = "üî¥"
                    status_text = "–ö—Ä–∏—Ç–∏—á–Ω–æ! –ù—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å"
                elif token_stats['percentage_used'] >= 70:
                    status_emoji = "üü°"
                    status_text = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"
                elif token_stats['percentage_used'] >= 50:
                    status_emoji = "üü†"
                    status_text = "–ü–æ–ª–æ–≤–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"
                else:
                    status_emoji = "üü¢"
                    status_text = "–í –Ω–æ—Ä–º–µ"
                
                last_usage_text = "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å"
                if token_stats['last_usage_at']:
                    try:
                        from datetime import datetime
                        if isinstance(token_stats['last_usage_at'], str):
                            last_usage = datetime.fromisoformat(token_stats['last_usage_at'].replace('Z', '+00:00'))
                        else:
                            last_usage = token_stats['last_usage_at']
                        last_usage_text = last_usage.strftime("%d.%m.%Y %H:%M")
                    except:
                        last_usage_text = "–ù–µ–¥–∞–≤–Ω–æ"
                
                text = f"""
üí∞ <b>–¢–æ–∫–µ–Ω—ã OpenAI</b>

{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}

üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
   –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {used_formatted} / {limit_formatted} ({percentage})
   –û—Å—Ç–∞–ª–æ—Å—å: {remaining_formatted}

üìà <b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>
   –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {input_formatted}
   –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {output_formatted}
   
ü§ñ <b>OpenAI –±–æ—Ç–æ–≤:</b> {token_stats['bots_count']}
‚è∞ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> {last_usage_text}

{Emoji.INFO} <b>–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ–∫–µ–Ω—ã?</b>
‚Ä¢ –¢–æ–∫–µ–Ω—ã - —ç—Ç–æ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è OpenAI API
‚Ä¢ ~1 —Ç–æ–∫–µ–Ω ‚âà 0.75 —Å–ª–æ–≤–∞ –≤ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –í—Ö–æ–¥—è—â–∏–µ: –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –ò–ò
‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–µ: –æ—Ç–≤–µ—Ç—ã –ò–ò –≤–∞–º

{Emoji.ROCKET} <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:</b>
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
"""
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard_buttons = [
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_tokens")]
            ]
            
            if token_stats['has_openai_bots']:
                keyboard_buttons.append([
                    InlineKeyboardButton(text="üí≥ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data="request_token_topup")
                ])
            
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"{Emoji.BACK} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
            logger.info("‚úÖ Token statistics displayed successfully", 
                       user_id=self.owner_user_id,
                       total_used=token_stats['total_used'],
                       percentage_used=token_stats['percentage_used'])
            
        except Exception as e:
            logger.error("üí• Failed to show token stats", 
                        bot_id=self.bot_id,
                        user_id=self.owner_user_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤", show_alert=True)
    
    async def debug_owner_message(self, message: Message):
        """Debug –º–µ—Ç–æ–¥"""
        user_id = message.from_user.id
        is_owner = self._is_owner(user_id)
        
        config = await self._get_fresh_config()
        ai_status, ai_type = self._get_ai_agent_info(config)
        token_stats = await self._get_token_stats()
        content_agent_status, has_content_agent = await self._get_content_agent_info()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å fresh data
        subscription_enabled = await self._get_subscription_enabled_fresh()
        channel_info = await self._get_subscription_channel_info_fresh()
        
        from datetime import datetime
        current_time = datetime.now().strftime("%H:%M:%S.%f")
        
        await message.answer(
            f"üîç <b>Debug Info ({current_time}):</b>\n"
            f"User ID: {user_id}\n"
            f"Owner ID: {self.owner_user_id}\n"
            f"Is Owner: {is_owner}\n"
            f"Bot ID: {self.bot_id}\n"
            f"Bot Username: {self.bot_username}\n\n"
            f"üîÑ <b>Fresh Config Check:</b>\n"
            f"Welcome Message: {'‚úÖ' if config.get('welcome_message') else '‚ùå'}\n"
            f"Welcome Button: {'‚úÖ' if config.get('welcome_button_text') else '‚ùå'}\n"
            f"Confirmation: {'‚úÖ' if config.get('confirmation_message') else '‚ùå'}\n"
            f"AI Agent: {ai_status}\n"
            f"AI Type: {ai_type}\n\n"
            f"üí∞ <b>Token Stats:</b>\n"
            f"Has OpenAI Bots: {token_stats['has_openai_bots']}\n"
            f"Tokens Used: {self._format_number(token_stats['total_used'])}\n"
            f"Tokens Limit: {self._format_number(token_stats['limit'])}\n"
            f"Usage %: {self._format_percentage(token_stats['total_used'], token_stats['limit'])}\n"
            f"Bots Count: {token_stats['bots_count']}\n\n"
            f"üìù <b>Content Agent:</b>\n"
            f"Status: {content_agent_status}\n"
            f"Has Agent: {has_content_agent}\n\n"
            f"üîí <b>Subscription Settings (FRESH):</b>\n"
            f"Enabled: {subscription_enabled} ({'üü¢' if subscription_enabled else 'üî¥'})\n"
            f"Channel ID: {channel_info['channel_id']}\n"
            f"Channel Username: {channel_info['channel_username']}\n"
            f"Has Channel: {bool(channel_info['channel_id'])}"
        )
