"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OpenAI –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Responses API
–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ–º, –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º OpenAI –∞–≥–µ–Ω—Ç–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã OpenAI (–≤–µ–±-–ø–æ–∏—Å–∫, –∫–æ–¥, —Ñ–∞–π–ª—ã)
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–æ–ª—å–∫–æ –¥–ª—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤
‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–æ —Ä–∞–∑–ª–∏—á–∏–µ –∞–¥–º–∏–Ω/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
"""

import structlog
import time
from datetime import datetime
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from ..states import AISettingsStates
from ..keyboards import AIKeyboards

logger = structlog.get_logger()


class OpenAIHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OpenAI –∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Responses API"""
    
    def __init__(self, db, bot_config: dict, ai_assistant, user_bot):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        self.ai_assistant = ai_assistant
        self.user_bot = user_bot
        
        # –•—Ä–∞–Ω–∏–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è)
        self._ai_assistant_id = bot_config.get('ai_assistant_id')
        self._ai_assistant_settings = bot_config.get('ai_assistant_settings', {})
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._current_state_data = {}
        
        logger.info("üé® OpenAIHandler initialized", 
                   bot_id=self.bot_id,
                   has_openai_agent=bool(self._ai_assistant_id))

    # ===== –°–í–û–ô–°–¢–í–ê –î–õ–Ø –î–û–°–¢–£–ü–ê –ö –ê–ö–¢–£–ê–õ–¨–ù–´–ú –î–ê–ù–ù–´–ú =====
    
    @property
    def ai_assistant_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ ID –∞–≥–µ–Ω—Ç–∞"""
        return self._ai_assistant_id
    
    @ai_assistant_id.setter
    def ai_assistant_id(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID –∞–≥–µ–Ω—Ç–∞"""
        self._ai_assistant_id = value
    
    @property 
    def ai_assistant_settings(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞"""
        return self._ai_assistant_settings
    
    @ai_assistant_settings.setter
    def ai_assistant_settings(self, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞"""
        self._ai_assistant_settings = value

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò =====
    
    async def _sync_with_db_state(self, force: bool = False) -> bool:
        """‚úÖ –ù–û–í–´–ô: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ë–î"""
        try:
            logger.info("üîÑ Syncing local state with database", 
                       bot_id=self.bot_id,
                       force=force,
                       current_agent_id=self.ai_assistant_id)
            
            fresh_bot = await self.db.get_bot_by_id(self.bot_id, fresh=True)
            
            if fresh_bot:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                old_agent_id = self.ai_assistant_id
                old_ai_type = self.ai_assistant_settings.get('agent_type', 'none')
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ë–î
                self.ai_assistant_id = fresh_bot.openai_agent_id
                
                if fresh_bot.openai_settings:
                    self.ai_assistant_settings = fresh_bot.openai_settings.copy()
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    if fresh_bot.ai_assistant_type == 'openai':
                        self.ai_assistant_settings['agent_type'] = 'openai'
                else:
                    # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –Ω–æ —Ç–∏–ø –µ—Å—Ç—å
                    if fresh_bot.ai_assistant_type == 'openai' and fresh_bot.openai_agent_id:
                        self.ai_assistant_settings = {
                            'agent_type': 'openai',
                            'agent_name': fresh_bot.openai_agent_name or 'AI –ê–≥–µ–Ω—Ç',
                            'agent_role': fresh_bot.openai_agent_instructions or '–ü–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫'
                        }
                    else:
                        self.ai_assistant_settings = {'agent_type': 'none'}
                
                logger.info("‚úÖ State synchronized with database", 
                           bot_id=self.bot_id,
                           old_agent_id=old_agent_id,
                           new_agent_id=self.ai_assistant_id,
                           old_ai_type=old_ai_type,
                           new_ai_type=self.ai_assistant_settings.get('agent_type'),
                           ai_enabled=fresh_bot.ai_assistant_enabled,
                           db_ai_type=fresh_bot.ai_assistant_type)
                
                return True
            else:
                logger.warning("‚ö†Ô∏è Could not get fresh bot data from DB")
                return False
                
        except Exception as e:
            logger.error("üí• Failed to sync with database state", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__)
            return False

    # ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø =====
    
    def _has_openai_agent(self) -> bool:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è OpenAI –∞–≥–µ–Ω—Ç–∞"""
        return (
            self.ai_assistant_settings.get('agent_type') == 'openai' and
            bool(self.ai_assistant_id) and
            self.ai_assistant_settings.get('creation_method') in ['responses_api', 'real_openai_api']
        )
    
    async def handle_openai_action(self, callback: CallbackQuery, state: FSMContext, is_owner_check):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π OpenAI + –ö–†–ò–¢–ò–ß–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò"""
        logger.info("üéØ OpenAI action callback", 
                   user_id=callback.from_user.id,
                   callback_data=callback.data)
        
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        action = callback.data.replace("openai_", "")
        
        # ‚úÖ –ó–ê–©–ò–¢–ê: –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º confirm_delete —á–µ—Ä–µ–∑ –æ–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
        if action == "confirm_delete":
            logger.warning("‚ö†Ô∏è confirm_delete reached general handler, ignoring")
            return
        
        logger.info("üîÑ Processing OpenAI action", 
                   action=action,
                   bot_id=self.bot_id)
        
        # ===== –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø OPENAI =====
        if action == "create":
            await self._create_openai_agent(callback, state)
        elif action == "test":
            await self._test_openai_assistant(callback, state)
        elif action == "delete":
            await self._delete_openai_agent(callback)
        elif action == "tools_settings":
            await self.handle_tools_settings(callback, is_owner_check)
        elif action == "toggle_web_search":
            await self.handle_toggle_web_search(callback, is_owner_check)
        elif action == "toggle_code_interpreter":
            await self.handle_toggle_code_interpreter(callback, is_owner_check)
        elif action == "toggle_file_search":
            await self.handle_toggle_file_search(callback, is_owner_check)
        elif action == "upload_files":
            await self.handle_upload_files(callback, is_owner_check)
        elif action == "edit":
            await self.handle_edit_agent(callback, is_owner_check)
        elif action == "edit_name":
            await self.handle_edit_name(callback, state)
        elif action == "edit_prompt":
            await self.handle_edit_prompt(callback, state)
        elif action == "sync_data":
            await self.handle_sync_agent_data(callback, is_owner_check)
    
    async def handle_navigation_action(self, callback: CallbackQuery, state: FSMContext, is_owner_check):
        """‚úÖ –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        logger.info("üß≠ Navigation action callback", 
                   user_id=callback.from_user.id,
                   callback_data=callback.data)
        
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        action = callback.data
        
        logger.info("üîÑ Processing navigation action", 
                   action=action,
                   bot_id=self.bot_id)
        
        # ===== –ö–†–ò–¢–ò–ß–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò =====
        if action == "admin_panel":
            await self.handle_admin_panel(callback, state)
        elif action == "admin_ai":
            await self.handle_admin_ai(callback, state)
        elif action == "admin_main":
            await self.handle_admin_main(callback, state)
        else:
            logger.warning("‚ö†Ô∏è Unknown navigation action", action=action)

    # ===== –ö–†–ò–¢–ò–ß–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò =====
    
    async def handle_admin_panel(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ù–û–í–´–ô: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        logger.info("üè† Returning to admin panel", 
                   user_id=callback.from_user.id,
                   bot_id=self.bot_id)
        
        await state.clear()
        
        text = f"""
üîß <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ @{self.bot_username}</b>

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–∏–º –±–æ—Ç–æ–º:
"""
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        try:
            from ..keyboards import AdminKeyboards
            keyboard = AdminKeyboards.main_menu()
        except Exception as e:
            logger.error("üí• Error importing AdminKeyboards", error=str(e))
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", callback_data="admin_ai")],
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data="admin_settings")],
                [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
            ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    async def handle_exit_conversation(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ù–û–í–´–ô: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        logger.info("üö™ Exiting AI conversation", 
                   user_id=callback.from_user.id,
                   bot_id=self.bot_id)
        
        await state.clear()
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò
        await self.handle_admin_ai(callback, state)
    
    async def handle_admin_ai(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ù–û–í–´–ô: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò"""
        logger.info("ü§ñ Going to AI settings", 
                   user_id=callback.from_user.id,
                   bot_id=self.bot_id)
        
        await state.clear()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≥–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await self._sync_with_db_state()
        
        agent_type = self.ai_assistant_settings.get('agent_type', 'none')
        has_agent = bool(self.ai_assistant_id) and agent_type == 'openai'
        
        await self.show_settings(callback, has_ai_agent=has_agent)
    
    async def handle_admin_main(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ù–û–í–´–ô: –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        logger.info("üè† Returning to main menu", 
                   user_id=callback.from_user.id,
                   bot_id=self.bot_id)
        
        await state.clear()
        
        text = f"""
ü§ñ <b>–ë–æ—Ç @{self.bot_username}</b>

–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
            [InlineKeyboardButton(text="ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò", callback_data="admin_ai")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def show_settings(self, callback: CallbackQuery, has_ai_agent: bool):
        """‚úÖ –£–ü–†–û–©–ï–ù–û: –ü–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ OpenAI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        logger.info("üìã Displaying OpenAI settings", 
                   bot_id=self.bot_id,
                   has_ai_agent=has_ai_agent)
        
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        await self._sync_with_db_state()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞
        agent_type = self.ai_assistant_settings.get('agent_type', 'none')
        openai_assistant_id = self.ai_assistant_id if agent_type == 'openai' else None
        has_real_agent = bool(openai_assistant_id)
        
        logger.info("üîç OpenAI interface check", 
                   agent_type=agent_type,
                   openai_assistant_id=openai_assistant_id,
                   has_real_agent=has_real_agent)
        
        if not has_real_agent:
            # ‚úÖ –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è OpenAI –∞–≥–µ–Ω—Ç–∞
            await self._show_create_openai_menu(callback)
        else:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–ë–ï–ó –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ç–∏–ø–∞)
            await self._show_existing_agent_settings(callback, openai_assistant_id)

    async def _show_create_openai_menu(self, callback: CallbackQuery):
        """‚úÖ –ù–û–í–û–ï: –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è OpenAI –∞–≥–µ–Ω—Ç–∞"""
        text = """
üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –±–∞–∑–µ OpenAI</b>

<b>üöÄ OpenAI GPT-4o + Responses API</b>

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞:</b>
‚ú® –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö OpenAI
üß† –°–∞–º–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å GPT-4o
üõ†Ô∏è –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–≤–µ–±-–ø–æ–∏—Å–∫, –∫–æ–¥, —Ñ–∞–π–ª—ã)
‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫
üìä –ù–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –í—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç–µ –∏–º—è –∏ —Ä–æ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞
2. –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö OpenAI —á–µ—Ä–µ–∑ Responses API
3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—â–∞—é—Ç—Å—è —Å –∞–≥–µ–Ω—Ç–æ–º –ø—Ä—è–º–æ –≤ –≤–∞—à–µ–º –±–æ—Ç–µ
4. –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<b>–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞?</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé® –°–æ–∑–¥–∞—Ç—å OpenAI –∞–≥–µ–Ω—Ç–∞", callback_data="openai_create")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def _show_existing_agent_settings(self, callback: CallbackQuery, openai_assistant_id: str):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–ë–ï–ó –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ç–∏–ø–∞)"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
        agent_name = self.ai_assistant_settings.get('agent_name')
        creation_method = self.ai_assistant_settings.get('creation_method', 'unknown')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        settings = self.ai_assistant_settings
        enabled_tools_count = sum([
            settings.get('enable_web_search', False),
            settings.get('enable_code_interpreter', False),
            settings.get('enable_file_search', False),
            settings.get('enable_image_generation', False)
        ])
        
        logger.info("üîç OpenAI agent info", 
                   openai_assistant_id=openai_assistant_id,
                   agent_name=agent_name,
                   creation_method=creation_method,
                   enabled_tools_count=enabled_tools_count)
        
        agent_info = f"ID: {openai_assistant_id[:15]}..."
        agent_details = ""
        
        if agent_name:
            agent_info = f"{agent_name} (ID: {openai_assistant_id[:15]}...)"
        
        if creation_method == 'fallback_stub':
            agent_details += "\n‚ö†Ô∏è –†–µ–∂–∏–º: –¢–µ—Å—Ç–æ–≤—ã–π (OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        elif creation_method == 'responses_api':
            agent_details += "\n‚úÖ –†–µ–∂–∏–º: Responses API (–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)"
        elif creation_method == 'real_openai_api':
            agent_details += "\n‚úÖ –†–µ–∂–∏–º: –†–µ–∞–ª—å–Ω—ã–π OpenAI"
        
        if enabled_tools_count > 0:
            agent_details += f"\nüß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {enabled_tools_count} –≤–∫–ª—é—á–µ–Ω–æ"
        
        text = f"""
üé® <b>–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–ò –ê–≥–µ–Ω—Ç</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
üéØ –ê–≥–µ–Ω—Ç: {agent_info}{agent_details}
üß† –ú–æ–¥–µ–ª—å: GPT-4o (Responses API)
üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚ö° –õ–∏–º–∏—Ç—ã: –£–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–∫–µ–Ω–∞–º–∏

<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Responses API:</b>
- –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö OpenAI
- –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–ø–æ–∏—Å–∫, –∫–æ–¥, —Ñ–∞–π–ª—ã)
- –ù–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
- –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 24/7

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º:</b>
"""
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–ï–ó –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
        keyboard = AIKeyboards.openai_settings_menu(True)
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    # ===== –°–û–ó–î–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê =====
    
    async def _create_openai_agent(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è OpenAI –∞–≥–µ–Ω—Ç–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
        logger.info("üé® Starting OpenAI agent creation flow", 
                   user_id=callback.from_user.id,
                   bot_id=self.bot_id)
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
        logger.info("üîÑ Pre-creation state sync check", 
                   current_agent_id=self.ai_assistant_id,
                   current_agent_type=self.ai_assistant_settings.get('agent_type'))
        
        sync_success = await self._sync_with_db_state(force=True)
        
        if sync_success:
            logger.info("‚úÖ Pre-creation sync completed", 
                       synced_agent_id=self.ai_assistant_id,
                       synced_agent_type=self.ai_assistant_settings.get('agent_type'))
        else:
            logger.warning("‚ö†Ô∏è Pre-creation sync failed, continuing with fallback cleanup")
            # Fallback - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            self.ai_assistant_id = None
            self.ai_assistant_settings = {'agent_type': 'openai'}
        
        await state.set_state(AISettingsStates.waiting_for_openai_name)
        
        text = f"""
üé® <b>–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞</b>

<b>–®–∞–≥ 1/2: –ò–º—è –∞–≥–µ–Ω—Ç–∞</b>

–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏.

<b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –∏–º–µ–Ω:</b>
- –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ú–∞—Ä–∏—è
- –ü–æ–º–æ—â–Ω–∏–∫ –ê–ª–µ–∫—Å
- –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
- –¢—Ä–µ–Ω–µ—Ä –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É

<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_name_input(self, message: Message, state: FSMContext, is_owner_check):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ OpenAI –∞–≥–µ–Ω—Ç–∞"""
        logger.info("üìù OpenAI agent name input", 
                   user_id=message.from_user.id,
                   input_text=message.text,
                   bot_id=self.bot_id)
        
        if not is_owner_check(message.from_user.id):
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_ai(message, state)
            return
        
        agent_name = message.text.strip()
        
        logger.info("üîç Validating agent name", 
                   agent_name=agent_name,
                   name_length=len(agent_name))
        
        if len(agent_name) < 2:
            await message.answer("‚ùå –ò–º—è –∞–≥–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if len(agent_name) > 100:
            await message.answer("‚ùå –ò–º—è –∞–≥–µ–Ω—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(agent_name=agent_name)
        await state.set_state(AISettingsStates.waiting_for_openai_role)
        
        logger.info("‚úÖ Agent name accepted, moving to role input", 
                   agent_name=agent_name)
        
        text = f"""
‚úÖ <b>–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:</b> {agent_name}

<b>–®–∞–≥ 2/2: –†–æ–ª—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</b>

–û–ø–∏—à–∏—Ç–µ —Ä–æ–ª—å –≤–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏ —Ç–æ, –∫–∞–∫ –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤!

<b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö —Ä–æ–ª–µ–π:</b>
- "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –ø–∏—Ç–∞–Ω–∏—é."
- "–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ü–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–æ–≤–∞—Ä, –æ—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."
- "–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –í—ã—Å–ª—É—à–∏–≤–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–∞–≤–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–æ–≤–µ—Ç—ã."

<b>–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_ai")]
        ])
        
        await message.answer(text, reply_markup=keyboard)

    async def handle_role_input(self, message: Message, state: FSMContext, is_owner_check):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ–ª–∏ OpenAI –∞–≥–µ–Ω—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX"""
        logger.info("üìù OpenAI agent role input", 
                   user_id=message.from_user.id,
                   input_length=len(message.text),
                   bot_id=self.bot_id)
        
        if not is_owner_check(message.from_user.id):
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_ai(message, state)
            return
        
        agent_role = message.text.strip()
        
        logger.info("üîç Validating agent role", 
                   role_length=len(agent_role))
        
        if len(agent_role) < 10:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        if len(agent_role) > 1000:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            admin_chat_id = message.chat.id
            await state.update_data(admin_chat_id=admin_chat_id)
            
            logger.info("üì± Admin chat ID captured for token tracking", 
                       admin_chat_id=admin_chat_id, user_id=message.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            agent_name = data.get('agent_name')
            
            logger.info("üìä Agent creation data", 
                       agent_name=agent_name,
                       agent_role=agent_role)
            
            if not agent_name:
                logger.error("‚ùå Agent name lost from state")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–º—è –∞–≥–µ–Ω—Ç–∞ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            progress_message = await message.answer("üîÑ –°–æ–∑–¥–∞—é –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Responses API...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ _create_agent_in_openai
            self._current_state_data = data
            
            logger.info("üöÄ Calling _create_agent_in_openai")
            success, response_data = await self._create_agent_in_openai(agent_name, agent_role)
            
            logger.info("üìä Agent creation result", 
                       success=success,
                       response_keys=list(response_data.keys()) if response_data else None)
            
            if success:
                creation_method = response_data.get('creation_method', 'unknown')
                duration = response_data.get('total_duration', 'unknown')
                
                success_message = f"üéâ <b>–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                success_message += f"<b>–ò–º—è:</b> {agent_name}\n"
                success_message += f"<b>–†–æ–ª—å:</b> {agent_role[:100]}{'...' if len(agent_role) > 100 else ''}\n"
                
                if creation_method == 'responses_api':
                    success_message += f"\n‚úÖ <b>–°–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Responses API</b> –∑–∞ {duration}\n"
                    success_message += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º\n"
                    success_message += f"‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã OpenAI\n"
                elif creation_method == 'fallback_stub':
                    success_message += f"\n‚ö†Ô∏è <b>–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º</b> (Responses API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)\n"
                
                success_message += f"\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞!"
                
                await progress_message.edit_text(
                    success_message,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="openai_test")],
                        [InlineKeyboardButton(text="üß∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", callback_data="openai_tools_settings")],
                        [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                    ])
                )
            else:
                error_msg = response_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                if "500" in error_msg or "server_error" in error_msg:
                    user_friendly_error = """
‚ùå <b>–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å OpenAI</b>

–°–µ—Ä–≤–µ—Ä—ã OpenAI —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã. –≠—Ç–æ —á–∞—Å—Ç–∞—è —Å–∏—Ç—É–∞—Ü–∏—è.

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã
- –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ–∑–∂–µ
- –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<b>–≠—Ç–æ –ù–ï –æ—à–∏–±–∫–∞ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!</b>
"""
                elif "429" in error_msg or "rate" in error_msg:
                    user_friendly_error = """
‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤</b>

OpenAI –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É.

<b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
- –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã
- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å–Ω–æ–≤–∞
- –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
"""
                elif "401" in error_msg or "unauthorized" in error_msg:
                    user_friendly_error = """
‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º</b>

–í–æ–∑–º–æ–∂–Ω–æ API –∫–ª—é—á OpenAI –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.

<b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>
"""
                else:
                    user_friendly_error = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞</b>

{error_msg}

<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç</b>
"""
                
                logger.error("‚ùå Agent creation failed", error=error_msg)
                
                await progress_message.edit_text(
                    user_friendly_error,
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="openai_create")],
                        [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                    ])
                )
            
            await state.clear()
            
        except Exception as e:
            logger.error("üí• Failed to create OpenAI agent", 
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                ])
            )
            await state.clear()

    async def _create_agent_in_openai(self, name: str, role: str) -> tuple[bool, dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Responses API"""
        logger.info("üé¨ Starting OpenAI agent creation via Responses API", 
                   bot_id=self.bot_id,
                   owner_user_id=self.owner_user_id,
                   agent_name=name,
                   agent_role=role)
        
        overall_start_time = time.time()
        
        try:
            # –ò–º–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            logger.info("üì¶ Importing OpenAI Responses API service...")
            
            try:
                from services.openai_assistant import openai_client
                from services.openai_assistant.models import OpenAIResponsesRequest
                
                logger.info("‚úÖ OpenAI Responses API service imported successfully", 
                           client_type=type(openai_client).__name__)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞
                if not openai_client.is_available():
                    logger.warning("‚ö†Ô∏è OpenAI client reports not available")
                    return False, {"error": "OpenAI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                
                # –ü–æ–ª—É—á–∞–µ–º admin_chat_id –∏–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
                admin_chat_id = None
                try:
                    if hasattr(self, '_current_state_data'):
                        admin_chat_id = self._current_state_data.get('admin_chat_id')
                    
                    if not admin_chat_id:
                        admin_chat_id = self.owner_user_id
                        
                    logger.info("üì± Admin chat ID for Responses API", 
                               admin_chat_id=admin_chat_id)
                        
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Could not determine admin_chat_id", error=str(e))
                    admin_chat_id = self.owner_user_id
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Responses API
                logger.info("üìã Creating Responses API agent request...")
                
                system_prompt = f"–¢—ã - {role}. –¢–≤–æ–µ –∏–º—è {name}. –û—Ç–≤–µ—á–∞–π –ø–æ–ª–µ–∑–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
                
                request = OpenAIResponsesRequest(
                    bot_id=self.bot_id,
                    agent_name=name,
                    agent_role=role,
                    system_prompt=system_prompt,
                    model="gpt-4o",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è Responses API
                    temperature=0.7,
                    max_tokens=4000,
                    store_conversations=True,    # –í–ö–õ–Æ–ß–ê–ï–ú –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    conversation_retention=30,   # –•—Ä–∞–Ω–∏–º 30 –¥–Ω–µ–π
                    enable_streaming=True,       # –ü–æ—Ç–æ–∫–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
                    enable_web_search=False,     # –ü–æ–∫–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                    enable_code_interpreter=False,
                    enable_file_search=False,
                    enable_image_generation=False
                )
                
                logger.info("‚úÖ Responses API request created", 
                           agent_name=request.agent_name,
                           model=request.model,
                           store_conversations=request.store_conversations,
                           tools_enabled=sum([
                               request.enable_web_search,
                               request.enable_code_interpreter,
                               request.enable_file_search,
                               request.enable_image_generation
                           ]))
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
                logger.info("üîç Validating Responses API request...")
                
                is_valid, error_msg = openai_client.validate_create_request(request)
                
                if not is_valid:
                    logger.error("‚ùå Responses API request validation failed", 
                               validation_error=error_msg)
                    return False, {"error": error_msg}
                
                logger.info("‚úÖ Request validation passed")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∞–≥–µ–Ω—Ç–∞
                agent = request.to_agent()
                
                logger.info("‚úÖ Agent object created for Responses API", 
                           agent_name=agent.agent_name,
                           store_conversations=agent.store_conversations,
                           enable_streaming=agent.enable_streaming)
                
                # –û–°–ù–û–í–ù–û–ô –í–´–ó–û–í –°–û–ó–î–ê–ù–ò–Ø –ß–ï–†–ï–ó RESPONSES API
                logger.info("üöÄ Calling OpenAI Responses API assistant creation...")
                
                creation_start_time = time.time()
                
                response = await openai_client.create_assistant(agent)
                
                creation_duration = time.time() - creation_start_time
                
                logger.info("üì° OpenAI Responses API call completed", 
                           duration=f"{creation_duration:.2f}s",
                           response_success=response.success,
                           response_text=response.output_text if response.success else None,
                           response_error=response.error if not response.success else None,
                           response_id=response.response_id if response.success else None)
                
                if response.success:
                    # –£–°–ü–ï–®–ù–û–ï –°–û–ó–î–ê–ù–ò–ï –ß–ï–†–ï–ó RESPONSES API
                    logger.info("üéâ OpenAI agent created successfully via Responses API")
                    
                    assistant_id = response.response_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º response_id –∫–∞–∫ assistant_id
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥–µ–Ω—Ç–∞ —Å Responses API –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    save_success = await self._save_agent_with_responses_api(
                        assistant_id=assistant_id,
                        name=name,
                        role=role,
                        system_prompt=system_prompt,
                        agent=agent,
                        admin_chat_id=admin_chat_id
                    )
                    
                    if not save_success:
                        logger.error("‚ùå Failed to save Responses API agent")
                        return False, {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞"}
                    
                    logger.info("‚úÖ Responses API agent created and saved")
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                    await self._sync_with_db_state(force=True)
                    
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    try:
                        await self._safe_update_user_bot(
                            ai_assistant_id=assistant_id,
                            ai_assistant_settings=self.ai_assistant_settings
                        )
                        logger.info("‚úÖ UserBot updated for Responses API")
                    except Exception as update_error:
                        logger.error("‚ö†Ô∏è UserBot update failed", error=str(update_error))
                    
                    try:
                        await self._safe_update_bot_manager(
                            ai_assistant_id=assistant_id,
                            ai_assistant_settings=self.ai_assistant_settings
                        )
                        logger.info("‚úÖ BotManager updated for Responses API")
                    except Exception as update_error:
                        logger.error("‚ö†Ô∏è BotManager update failed", error=str(update_error))
                    
                    total_duration = time.time() - overall_start_time
                    
                    logger.info("üèÅ Responses API agent creation completed successfully", 
                               bot_id=self.bot_id,
                               agent_name=name,
                               assistant_id=assistant_id,
                               total_duration=f"{total_duration:.2f}s",
                               creation_duration=f"{creation_duration:.2f}s")
                    
                    return True, {
                        "assistant_id": assistant_id,
                        "message": response.output_text,
                        "creation_method": "responses_api",
                        "creation_duration": creation_duration,
                        "total_duration": total_duration
                    }
                    
                else:
                    # –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø
                    logger.error("üí• OpenAI Responses API creation failed", 
                               bot_id=self.bot_id,
                               agent_name=name,
                               error=response.error,
                               duration=f"{creation_duration:.2f}s")
                    
                    return False, {"error": response.error}
                    
            except ImportError as import_error:
                # FALLBACK –ü–†–ò –û–¢–°–£–¢–°–¢–í–ò–ò OPENAI –°–ï–†–í–ò–°–ê
                logger.warning("üì¶ OpenAI Responses API service not available, using fallback", 
                              import_error=str(import_error))
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                fake_assistant_id = f"asst_fallback_{int(datetime.now().timestamp())}"
                
                ai_settings = self.ai_assistant_settings.copy()
                ai_settings.update({
                    'agent_type': 'openai',
                    'agent_name': name,
                    'agent_role': role,
                    'created_at': datetime.now().isoformat(),
                    'status': 'stub_created',
                    'creation_method': 'fallback_stub',
                    'reason': 'responses_api_service_not_available',
                    'import_error': str(import_error)
                })
                
                try:
                    await self.db.update_ai_assistant(
                        self.bot_id, 
                        assistant_id=fake_assistant_id,
                        settings=ai_settings
                    )
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è fallback
                    await self._sync_with_db_state(force=True)
                    
                    total_duration = time.time() - overall_start_time
                    
                    logger.info("‚úÖ Stub agent created (Responses API unavailable)", 
                               bot_id=self.bot_id,
                               agent_name=name,
                               fake_assistant_id=fake_assistant_id,
                               total_duration=f"{total_duration:.2f}s")
                    
                    return True, {
                        "message": "–ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - Responses API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)",
                        "assistant_id": fake_assistant_id,
                        "creation_method": "fallback_stub",
                        "total_duration": total_duration
                    }
                    
                except Exception as db_error:
                    logger.error("üí• Failed to save stub configuration", error=str(db_error))
                    return False, {"error": f"Fallback creation failed: {str(db_error)}"}
                    
        except Exception as e:
            # –û–ë–©–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
            total_duration = time.time() - overall_start_time
            
            logger.error("üí• Exception in _create_agent_in_openai (Responses API)", 
                        bot_id=self.bot_id,
                        agent_name=name,
                        exception_type=type(e).__name__,
                        exception_message=str(e),
                        total_duration=f"{total_duration:.2f}s",
                        exc_info=True)
            
            return False, {"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"}

    async def _save_agent_with_responses_api(self, assistant_id: str, name: str, role: str, 
                                           system_prompt: str, agent: any, admin_chat_id: int) -> bool:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π"""
        try:
            logger.info("üíæ Saving OpenAI agent via new DatabaseManager architecture", 
                       assistant_id=assistant_id, 
                       admin_chat_id=admin_chat_id,
                       bot_id=self.bot_id)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å agent_type
            agent_settings = {
                'agent_type': 'openai',  # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞
                'agent_name': name,
                'agent_role': role,
                'system_prompt': system_prompt,
                'model_used': agent.model,
                'model': agent.model,  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'admin_chat_id': admin_chat_id,
                'created_at': datetime.now().isoformat(),
                'creation_method': 'responses_api',
                
                # Responses API —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                'store_conversations': agent.store_conversations,
                'conversation_retention': agent.conversation_retention,
                'enable_streaming': getattr(agent, 'enable_streaming', True),
                'enable_web_search': False,
                'enable_code_interpreter': False,
                'enable_file_search': False,
                'enable_image_generation': False,
                
                # ‚úÖ –ù–û–í–û–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                'openai_settings': {
                    'api_type': 'responses',
                    'store_conversations': agent.store_conversations,
                    'conversation_retention': agent.conversation_retention,
                    'enable_streaming': getattr(agent, 'enable_streaming', True),
                    'enable_web_search': False,
                    'enable_code_interpreter': False,
                    'enable_file_search': False,
                    'enable_image_generation': False,
                    'temperature': 0.7,
                    'max_tokens': 4000,
                    'top_p': 1.0,
                    'frequency_penalty': 0.0,
                    'presence_penalty': 0.0
                }
            }
            
            logger.info("üìä Agent settings prepared", 
                       agent_type=agent_settings['agent_type'],
                       agent_name=agent_settings['agent_name'],
                       creation_method=agent_settings['creation_method'])
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–µ—Ç–æ–¥
                if hasattr(self.db, 'create_or_update_user_with_tokens'):
                    user_data = {'id': self.owner_user_id}
                    await self.db.create_or_update_user_with_tokens(
                        user_data=user_data,
                        admin_chat_id=admin_chat_id
                    )
                    logger.info("‚úÖ Token balance initialized")
                else:
                    logger.warning("‚ö†Ô∏è Token balance initialization method not available")
            except Exception as token_error:
                logger.warning("‚ö†Ô∏è Failed to initialize token balance", error=str(token_error))
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            from database.managers.ai_manager import AIManager
            
            success = await AIManager.save_openai_agent_config_responses_api(
                bot_id=self.bot_id,
                agent_id=assistant_id,
                config=agent_settings
            )
            
            if success:
                logger.info("‚úÖ OpenAI agent saved via new DatabaseManager")
                
                # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –±–æ—Ç–∞
                await self.db.expire_bot_cache(self.bot_id)
                
                return True
            else:
                logger.error("‚ùå Failed to save OpenAI agent via DatabaseManager")
                return False
                
        except Exception as e:
            logger.error("üí• Failed to save OpenAI agent", 
                        bot_id=self.bot_id,
                        assistant_id=assistant_id,
                        error=str(e),
                        error_type=type(e).__name__,
                        exc_info=True)
            return False

    # ===== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï =====
    
    async def _test_openai_assistant(self, callback: CallbackQuery, state: FSMContext):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Responses API"""
        logger.info("üß™ Starting OpenAI assistant test via Responses API", 
                   bot_id=self.bot_id)
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await self._sync_with_db_state()
        
        agent_type = self.ai_assistant_settings.get('agent_type', 'none')
        openai_assistant_id = self.ai_assistant_id if agent_type == 'openai' else None
        
        if not openai_assistant_id:
            logger.warning("‚ùå No OpenAI agent created for testing")
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ OpenAI –∞–≥–µ–Ω—Ç–∞", show_alert=True)
            return
        
        logger.info("‚úÖ Starting OpenAI test mode via Responses API", 
                   openai_assistant_id=openai_assistant_id)
        
        await state.set_state(AISettingsStates.in_ai_conversation)
        # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 5: –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–ª–∏—á–∏–µ –∞–¥–º–∏–Ω/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        await state.update_data(agent_type='openai', user_id=callback.from_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        settings = self.ai_assistant_settings.get('openai_settings', {})
        enabled_tools = []
        if settings.get('enable_web_search'):
            enabled_tools.append("üåê –í–µ–±-–ø–æ–∏—Å–∫")
        if settings.get('enable_code_interpreter'):
            enabled_tools.append("üêç –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–¥–∞")
        if settings.get('enable_file_search'):
            enabled_tools.append("üìÅ –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º")
        if settings.get('enable_image_generation'):
            enabled_tools.append("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        tools_text = ""
        if enabled_tools:
            tools_text = f"\n<b>–í–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b> {', '.join(enabled_tools)}"
        
        text = f"""
üß™ <b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞ (Responses API)</b>

<b>–ê–≥–µ–Ω—Ç ID:</b> {openai_assistant_id[:15]}...
<b>–ú–æ–¥–µ–ª—å:</b> GPT-4o (Responses API)
<b>–†–µ–∂–∏–º:</b> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç{tools_text}

‚ú® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Responses API:</b>
- –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö OpenAI
- –ù–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å –∫–∞–∂–¥—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤

<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    # ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú–ò =====
    
    async def handle_tools_settings(self, callback: CallbackQuery, is_owner_check):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Responses API"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            settings = self.ai_assistant_settings.get('openai_settings', {})
            
            web_search = "‚úÖ" if settings.get('enable_web_search') else "‚ùå"
            code_interpreter = "‚úÖ" if settings.get('enable_code_interpreter') else "‚ùå"
            file_search = "‚úÖ" if settings.get('enable_file_search') else "‚ùå"
            
            vector_stores_count = len(settings.get('vector_store_ids', []))
            file_search_info = f" ({vector_stores_count} —Ö—Ä–∞–Ω–∏–ª–∏—â)" if vector_stores_count > 0 else ""
            
            text = f"""
üß∞ <b>–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Responses API</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
üåê –í–µ–±-–ø–æ–∏—Å–∫: {web_search}
üêç –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–¥–∞: {code_interpreter}
üìÅ –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º: {file_search}{file_search_info}

<b>–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:</b>

üåê <b>–í–µ–±-–ø–æ–∏—Å–∫</b>
- –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã –∏ —Å—Å—ã–ª–∫–∏
- –°—Ç–æ–∏–º–æ—Å—Ç—å: $25-50 –∑–∞ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤

üêç <b>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–¥–∞</b>
- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞
- –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
- –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è

üìÅ <b>–ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º</b>
- –ü–æ–∏—Å–∫ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
- RAG –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
- –°—Ç–æ–∏–º–æ—Å—Ç—å: $2.50 –∑–∞ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"üåê –í–µ–±-–ø–æ–∏—Å–∫ {web_search}", 
                                    callback_data="openai_toggle_web_search")],
                [InlineKeyboardButton(text=f"üêç –ö–æ–¥ {code_interpreter}", 
                                    callback_data="openai_toggle_code_interpreter")],
                [InlineKeyboardButton(text=f"üìÅ –§–∞–π–ª—ã {file_search}", 
                                    callback_data="openai_toggle_file_search")],
                [InlineKeyboardButton(text="üîß –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", 
                                    callback_data="openai_upload_files")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ai")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("üí• Error showing tools settings", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

    async def handle_toggle_web_search(self, callback: CallbackQuery, is_owner_check):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
        await self._toggle_openai_tool(callback, 'web_search', '–í–µ–±-–ø–æ–∏—Å–∫', is_owner_check)

    async def handle_toggle_code_interpreter(self, callback: CallbackQuery, is_owner_check):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞"""
        await self._toggle_openai_tool(callback, 'code_interpreter', '–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∫–æ–¥–∞', is_owner_check)

    async def handle_toggle_file_search(self, callback: CallbackQuery, is_owner_check):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º"""
        await self._toggle_openai_tool(callback, 'file_search', '–ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º', is_owner_check)

    async def _toggle_openai_tool(self, callback: CallbackQuery, tool_name: str, tool_display_name: str, is_owner_check):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = self.ai_assistant_settings.copy()
            openai_settings = settings.get('openai_settings', {})
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            setting_key = f'enable_{tool_name}'
            current_value = openai_settings.get(setting_key, False)
            openai_settings[setting_key] = not current_value
            
            settings['openai_settings'] = openai_settings
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            await self.db.update_ai_assistant(
                self.bot_id,
                settings=settings
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.ai_assistant_settings = settings
            
            status = "–≤–∫–ª—é—á–µ–Ω" if not current_value else "–≤—ã–∫–ª—é—á–µ–Ω"
            await callback.answer(f"{tool_display_name} {status}")
            
            logger.info("üîß Tool toggled", 
                       tool_name=tool_name,
                       new_status=not current_value,
                       bot_id=self.bot_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            await self.handle_tools_settings(callback, is_owner_check)
            
        except Exception as e:
            logger.error("üí• Error toggling tool", tool=tool_name, error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)

    async def handle_upload_files(self, callback: CallbackQuery, is_owner_check):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è file_search"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        text = """
üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞</b>

‚ö†Ô∏è <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>

–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:
1. –°–æ–∑–¥–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ OpenAI
2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
3. –ü–æ–ª—É—á–∏—Ç—å ID —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
4. –î–æ–±–∞–≤–∏—Ç—å ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

<b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º", callback_data="openai_tools_settings")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    # ===== –£–î–ê–õ–ï–ù–ò–ï –ê–ì–ï–ù–¢–ê =====
    
    async def _delete_openai_agent(self, callback: CallbackQuery):
        """‚úÖ –£–ü–†–û–©–ï–ù–ù–û–ï: –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
        logger.info("üóëÔ∏è Showing OpenAI agent deletion confirmation", 
                   bot_id=self.bot_id)
        
        agent_name = self.ai_assistant_settings.get('agent_name', '–ò–ò –∞–≥–µ–Ω—Ç–∞')
        
        text = f"""
üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ "{agent_name}"</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.

–í—ã —É–≤–µ—Ä–µ–Ω—ã?
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="openai_confirm_delete")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_ai")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_confirm_delete(self, callback: CallbackQuery, is_owner_check):
        """‚úÖ –£–ü–†–û–©–ï–ù–ù–û–ï: –£–¥–∞–ª–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        
        logger.info("üóëÔ∏è Simple OpenAI agent deletion", 
                   user_id=callback.from_user.id,
                   bot_id=self.bot_id)
        
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            agent_name = self.ai_assistant_settings.get('agent_name', '–∞–≥–µ–Ω—Ç–∞')
            await callback.message.edit_text("üîÑ –£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞...")
            
            # –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î
            await self.db.clear_ai_configuration(self.bot_id)
            
            # –õ–æ–∫–∞–ª—å–Ω–æ —Ç–æ–∂–µ –æ—á–∏—â–∞–µ–º –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
            self.ai_assistant_id = None
            self.ai_assistant_settings = {'agent_type': 'none'}
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (admin_main)
            text = f"""
‚úÖ <b>OpenAI –∞–≥–µ–Ω—Ç "{agent_name}" —É–¥–∞–ª–µ–Ω!</b>

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
            logger.info("‚úÖ OpenAI agent deleted successfully (simple method)")
            
        except Exception as e:
            logger.error("üí• Error in simple deletion", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

    # ===== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–ï–ù–¢–ê =====

    async def handle_edit_agent(self, callback: CallbackQuery, is_owner_check):
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            agent_name = self.ai_assistant_settings.get('agent_name', 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')
            agent_role = self.ai_assistant_settings.get('agent_role', '–ü–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫')
            system_prompt = self.ai_assistant_settings.get('system_prompt', '')
            
            text = f"""
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ "{agent_name}"</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
üìù <b>–ò–º—è:</b> {agent_name}
üé≠ <b>–†–æ–ª—å:</b> {agent_role}
üìã <b>–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b> {system_prompt[:100]}{'...' if len(system_prompt) > 100 else ''}

<b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –≤ OpenAI —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="openai_edit_name")],
                [InlineKeyboardButton(text="üé≠ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∏ –ø—Ä–æ–º–ø—Ç", callback_data="openai_edit_prompt")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_ai")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error("üí• Error showing edit menu", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)

    async def handle_edit_name(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏"""
        await callback.answer()
        await state.set_state(AISettingsStates.editing_agent_name)
        
        current_name = self.ai_assistant_settings.get('agent_name', 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')
        
        text = f"""
‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞</b>

<b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {current_name}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞:
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="openai_edit")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_edit_prompt(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
        await callback.answer()
        await state.set_state(AISettingsStates.editing_agent_prompt)
        
        current_role = self.ai_assistant_settings.get('agent_role', '–ü–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫')
        
        text = f"""
üé≠ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞</b>

<b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> {current_role}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞:

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."
- "–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ü–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç–∞–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä."

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –≤ OpenAI.
"""
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="openai_edit")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)

    async def handle_name_edit_input(self, message: Message, state: FSMContext, is_owner_check):
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏"""
        if not is_owner_check(message.from_user.id):
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_edit(message, state)
            return
        
        new_name = message.text.strip()
        
        if len(new_name) < 2 or len(new_name) > 100:
            await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è (–±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞)
            current_settings = self.ai_assistant_settings.copy()
            current_settings['agent_name'] = new_name
            
            await self.db.update_ai_assistant(
                self.bot_id,
                settings=current_settings
            )
            
            self.ai_assistant_settings = current_settings
            
            await message.answer(
                f"‚úÖ –ò–º—è –∞–≥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="openai_edit")],
                    [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                ])
            )
            
            await state.clear()
            
        except Exception as e:
            logger.error("üí• Error updating agent name", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")

    async def handle_prompt_edit_input(self, message: Message, state: FSMContext, is_owner_check):
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–∞"""
        if not is_owner_check(message.from_user.id):
            return
        
        if message.text == "/cancel":
            await self._cancel_and_show_edit(message, state)
            return
        
        new_role = message.text.strip()
        
        if len(new_role) < 10 or len(new_role) > 1000:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        try:
            progress_message = await message.answer("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            agent_name = self.ai_assistant_settings.get('agent_name', 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')
            old_assistant_id = self.ai_assistant_id
            
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            success, response_data = await self._recreate_agent_with_new_prompt(
                agent_name, new_role, old_assistant_id
            )
            
            if success:
                new_assistant_id = response_data.get('assistant_id')
                
                await progress_message.edit_text(
                    f"""‚úÖ <b>–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>

<b>–ò–º—è:</b> {agent_name}
<b>–ù–æ–≤–∞—è —Ä–æ–ª—å:</b> {new_role[:100]}{'...' if len(new_role) > 100 else ''}
<b>–ù–æ–≤—ã–π ID:</b> {new_assistant_id[:15]}...

–ê–≥–µ–Ω—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω –≤ OpenAI —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!""",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="openai_test")],
                        [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                    ])
                )
            else:
                error_msg = response_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await progress_message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {error_msg}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="openai_edit_prompt")],
                        [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
                    ])
                )
            
            await state.clear()
            
        except Exception as e:
            logger.error("üí• Error updating agent prompt", error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞")

    async def _recreate_agent_with_new_prompt(self, name: str, role: str, old_assistant_id: str) -> tuple[bool, dict]:
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        try:
            # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏–∑ OpenAI
            if old_assistant_id:
                try:
                    from services.openai_assistant import openai_client
                    await openai_client.delete_assistant(old_assistant_id)
                    logger.info("‚úÖ Old agent deleted from OpenAI")
                except Exception as e:
                    logger.warning("‚ö†Ô∏è Could not delete old agent", error=str(e))
            
            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            success, response_data = await self._create_agent_in_openai(name, role)
            
            if success:
                new_assistant_id = response_data.get('assistant_id')
                
                # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self._sync_with_db_state(force=True)
                
                # 4. –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                await self._safe_update_user_bot(
                    ai_assistant_id=new_assistant_id,
                    ai_assistant_settings=self.ai_assistant_settings
                )
                await self._safe_update_bot_manager(
                    ai_assistant_id=new_assistant_id,
                    ai_assistant_settings=self.ai_assistant_settings
                )
                
                logger.info("‚úÖ Agent recreated successfully", 
                           old_id=old_assistant_id,
                           new_id=new_assistant_id)
                
                return True, response_data
            
            return False, response_data
            
        except Exception as e:
            logger.error("üí• Error recreating agent", error=str(e))
            return False, {"error": str(e)}

    async def _cancel_and_show_edit(self, message: Message, state: FSMContext):
        """‚úÖ –î–û–ë–ê–í–ò–¢–¨: –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        await state.clear()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="openai_edit")]
        ])
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)

    # ===== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• =====
    
    async def handle_sync_agent_data(self, callback: CallbackQuery, is_owner_check):
        """–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞"""
        await callback.answer()
        
        if not is_owner_check(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            logger.info("üîÑ Manual agent data sync requested", bot_id=self.bot_id)
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            success = await self.db.sync_agent_data_fields(bot_id=self.bot_id)
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                validation = await self.db.validate_agent_data_consistency(self.bot_id)
                
                status = validation.get('overall_status', 'unknown')
                if status == 'consistent':
                    await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                else:
                    recommendations = validation.get('recommendations', [])
                    await callback.answer(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(recommendations)}")
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True)
                
        except Exception as e:
            logger.error("üí• Error in manual sync", error=str(e))
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", show_alert=True)

    # ===== –î–ò–ê–õ–û–ì –° OPENAI =====
    
    async def handle_openai_conversation(self, message: Message, data: dict) -> str:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≥–µ–Ω—Ç–∞ + —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤"""
        logger.info("üé® OpenAI conversation processing via Responses API", 
                   user_id=message.from_user.id,
                   message_length=len(message.text))
        
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –¥–∏–∞–ª–æ–≥–æ–º
            await self._sync_with_db_state()
            
            agent_type = self.ai_assistant_settings.get('agent_type', 'none')
            openai_assistant_id = self.ai_assistant_id if agent_type == 'openai' else None
            
            if not openai_assistant_id:
                logger.error("‚ùå No OpenAI assistant ID available",
                            cached_id=self.ai_assistant_id,
                            agent_type=agent_type)
                return "‚ùå OpenAI –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            
            logger.info("üìä OpenAI Responses API conversation parameters", 
                       openai_assistant_id=openai_assistant_id,
                       user_id=message.from_user.id)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI Responses API —Å–µ—Ä–≤–∏—Å
            try:
                from services.openai_assistant import openai_client
                from services.openai_assistant.models import OpenAIResponsesContext
                
                # –°–û–ó–î–ê–ï–ú –£–ü–†–û–©–ï–ù–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ (–ë–ï–ó previous_response_id)
                context = OpenAIResponsesContext(
                    user_id=message.from_user.id,
                    user_name=message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    username=message.from_user.username,
                    bot_id=self.bot_id,
                    chat_id=message.chat.id,
                    is_admin=message.from_user.id == self.owner_user_id
                )
                
                logger.info("üìù Responses API context prepared", 
                           user_name=context.user_name,
                           is_admin=context.is_admin)
                
                # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ß–ï–†–ï–ó RESPONSES API
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
                logger.info("üì° Sending message to OpenAI Responses API service")
                
                response = await openai_client.send_message(
                    assistant_id=openai_assistant_id,
                    message=message.text,
                    user_id=message.from_user.id,
                    context=context
                )
                
                logger.info("‚úÖ OpenAI Responses API response received", 
                           response_length=len(response) if response else 0)
                
                if response:
                    # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –í–°–ï–• (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤)
                    try:
                        await self.db.increment_ai_usage(self.bot_id, message.from_user.id)
                        logger.info("üí∞ Tokens charged", 
                                   bot_id=self.bot_id, 
                                   user_id=message.from_user.id,
                                   is_admin=message.from_user.id == self.owner_user_id)
                    except Exception as stats_error:
                        logger.warning("‚ö†Ô∏è Failed to update token usage", error=str(stats_error))
                    
                    logger.info("üìä Responses API conversation completed successfully")
                    return response
                else:
                    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI."
                    
            except ImportError:
                # Fallback –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ OpenAI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                logger.warning("üì¶ OpenAI Responses API service not available, using fallback")
                agent_name = self.ai_assistant_settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
                
                # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–∞–∂–µ –¥–ª—è fallback –æ—Ç–≤–µ—Ç–æ–≤
                try:
                    await self.db.increment_ai_usage(self.bot_id, message.from_user.id)
                    logger.info("üí∞ Tokens charged (fallback)", 
                               bot_id=self.bot_id, 
                               user_id=message.from_user.id)
                except Exception as stats_error:
                    logger.warning("‚ö†Ô∏è Failed to update token usage (fallback)", error=str(stats_error))
                
                return f"ü§ñ {agent_name}: –ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text}'. Responses API —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            
        except Exception as e:
            logger.error("üí• Error in OpenAI Responses API conversation", 
                        error=str(e),
                        error_type=type(e).__name__)
            return None

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def _cancel_and_show_ai(self, message: Message, state: FSMContext):
        """–û—Ç–º–µ–Ω–∞ –∏ –ø–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò"""
        logger.info("‚ùå Cancelling OpenAI operation", 
                   user_id=message.from_user.id,
                   bot_id=self.bot_id)
        
        await state.clear()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="ü§ñ –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ò–ò", callback_data="admin_ai")]
        ])
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard)
    
    async def _safe_update_user_bot(self, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ UserBot"""
        logger.info("üîÑ Attempting UserBot update", 
                   bot_id=self.bot_id,
                   update_keys=list(kwargs.keys()))
        
        try:
            if self.user_bot and hasattr(self.user_bot, 'update_ai_settings'):
                await self.user_bot.update_ai_settings(**kwargs)
                logger.info("‚úÖ UserBot update successful")
            else:
                logger.warning("‚ö†Ô∏è UserBot doesn't have update_ai_settings method", 
                             bot_id=self.bot_id,
                             has_user_bot=bool(self.user_bot),
                             has_method=hasattr(self.user_bot, 'update_ai_settings') if self.user_bot else False)
        except Exception as e:
            logger.error("üí• Failed to update UserBot settings", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__)
    
    async def _safe_update_bot_manager(self, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ bot_manager"""
        logger.info("üîÑ Attempting BotManager update", 
                   bot_id=self.bot_id,
                   update_keys=list(kwargs.keys()))
        
        try:
            bot_manager = self.bot_config.get('bot_manager')
            if bot_manager and hasattr(bot_manager, 'update_bot_config'):
                await bot_manager.update_bot_config(self.bot_id, **kwargs)
                logger.info("‚úÖ BotManager update successful")
            else:
                logger.warning("‚ö†Ô∏è BotManager doesn't have update_bot_config method", 
                             bot_id=self.bot_id,
                             has_bot_manager=bool(bot_manager),
                             has_method=hasattr(bot_manager, 'update_bot_config') if bot_manager else False)
        except Exception as e:
            logger.error("üí• Failed to update BotManager config", 
                        bot_id=self.bot_id,
                        error=str(e),
                        error_type=type(e).__name__)
