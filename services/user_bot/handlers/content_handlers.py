"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–æ–≤.

‚úÖ –û–ë–ù–û–í–õ–ï–ù–û –í –≠–¢–û–ô –í–ï–†–°–ò–ò:
1. üîß –ò–°–ü–†–ê–í–õ–ï–ù–ê –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _send_media_group_rewrite_result
2. üõ°Ô∏è –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
3. üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
4. üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
5. üîí –£—Å–∏–ª–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
6. ‚ú® –ù–û–í–û–ï: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
7. üîó –ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
8. üì∫ –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
9. ‚úèÔ∏è –ù–û–í–û–ï: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∫–∞–º–∏
10. üì§ –ù–û–í–û–ï: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª—ã

‚úÖ –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
1. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–∞–ª—å–±–æ–º–æ–≤) —á–µ—Ä–µ–∑ aiogram-media-group
2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Å —Ä–µ—Ä–∞–π—Ç–æ–º
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ MediaGroupBuilder
4. –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
5. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handlers (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ü–ï–†–ï–î –æ–±—â–∏–º–∏)
6. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç ContentStates —Å fallback
7. –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
8. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
9. –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–æ–≤ —Å –º–µ–¥–∏–∞
10. ‚ú® –£–ü–†–û–©–ï–ù–ù–´–ô –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
11. üîó –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
12. üì∫ –†–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
13. ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤
14. üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≥–æ—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª—ã

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –°–æ–∑–¥–∞–Ω–∏–µ –ò–ò –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ OpenAI)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —É–¥–∞–ª–µ–Ω–∏–µ)
- –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenAI Responses API
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ) —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º file_id
- ‚ú® –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–∞–ª—å–±–æ–º–æ–≤) —Å —Ä–µ—Ä–∞–π—Ç–æ–º
- üîó –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
- üì∫ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
- ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤
- üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª—ã
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
- FSM –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ —Ä–µ—Ä–∞–π—Ç–∞
- ‚ú® –ß–∏—Å—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""

import structlog
from typing import Dict, Any, List, Optional
from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputMediaVideo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder

# ‚úÖ –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
try:
    from aiogram_media_group import media_group_handler
    MEDIA_GROUP_AVAILABLE = True
except ImportError:
    logger = structlog.get_logger()
    logger.warning("‚ö†Ô∏è aiogram-media-group not installed. Media group functionality will be limited.")
    MEDIA_GROUP_AVAILABLE = False
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    def media_group_handler(func):
        return func

from services.content_agent import content_agent_service
from config import Emoji
from ..formatters import MessageFormatter

# ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å fallback
try:
    from ..states import ContentStates
    CONTENT_STATES_AVAILABLE = True
    logger = structlog.get_logger()
    logger.info("‚úÖ ContentStates imported successfully")
except ImportError as e:
    logger = structlog.get_logger()
    logger.warning("‚ö†Ô∏è ContentStates not found, creating temporary states", error=str(e))
    from aiogram.fsm.state import State, StatesGroup
    
    class ContentStates(StatesGroup):
        waiting_for_agent_name = State()
        waiting_for_agent_instructions = State()
        editing_agent_name = State()
        editing_agent_instructions = State()
        waiting_for_rewrite_post = State()
        waiting_for_channel_post = State()
        waiting_for_edit_instructions = State()
    
    CONTENT_STATES_AVAILABLE = False


def register_content_handlers(dp: Dispatcher, **kwargs):
    """‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤"""
    
    logger = structlog.get_logger()
    logger.info("üìù Registering content handlers with media group support, links extraction and channel integration")
    
    db = kwargs['db']
    bot_config = kwargs['bot_config']
    user_bot = kwargs.get('user_bot')
    
    logger.info("üìã Content handler registration parameters", 
               bot_id=bot_config.get('bot_id', 'unknown'),
               has_db=bool(db),
               has_user_bot=bool(user_bot),
               states_available=CONTENT_STATES_AVAILABLE,
               media_group_available=MEDIA_GROUP_AVAILABLE)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        handler = ContentHandler(db, bot_config, user_bot)
        
        # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ü–ï–†–í–´–ï!
        
        # ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–í–´–ú —Å—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π)
        if MEDIA_GROUP_AVAILABLE and CONTENT_STATES_AVAILABLE:
            @dp.message(F.media_group_id, F.content_type.in_({'photo', 'video'}))
            @media_group_handler
            async def handle_media_group_rewrite(messages: List[Message], state: FSMContext):
                """‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ —á–µ—Ä–µ–∑ aiogram-media-group"""
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ—Ä–∞–π—Ç–∞
                current_state = await state.get_state()
                if current_state != ContentStates.waiting_for_rewrite_post:
                    return
                
                logger.info("üì∏ Media group received for rewrite", 
                           user_id=messages[0].from_user.id,
                           media_count=len(messages),
                           media_group_id=messages[0].media_group_id,
                           bot_id=handler.bot_id)
                
                if not handler._is_owner(messages[0].from_user.id):
                    await messages[0].answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                    return
                
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º
                    await handler.handle_media_group_rewrite_input(messages, state)
                    
                except Exception as e:
                    logger.error("üí• Failed to handle media group rewrite", 
                                media_group_id=messages[0].media_group_id,
                                bot_id=handler.bot_id,
                                error=str(e))
                    await messages[0].answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ª—å–±–æ–º–∞")
            
            logger.info("‚úÖ Media group handler registered successfully")
        else:
            logger.warning("‚ö†Ô∏è Media group handler not registered - missing dependencies")
        
        # 1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        dp.callback_query.register(handler.cb_content_main, F.data == "content_main")
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ (–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª)
        dp.callback_query.register(handler.cb_create_agent, F.data == "content_create_agent")
        dp.callback_query.register(handler.cb_confirm_create_agent, F.data == "content_confirm_create")
        
        # 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º
        dp.callback_query.register(handler.cb_manage_agent, F.data == "content_manage")
        dp.callback_query.register(handler.cb_agent_settings, F.data == "content_settings")
        
        # 4. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        dp.callback_query.register(handler.cb_edit_agent_name, F.data == "content_edit_name")
        dp.callback_query.register(handler.cb_edit_agent_instructions, F.data == "content_edit_instructions")
        dp.callback_query.register(handler.cb_confirm_instructions_update, F.data == "content_confirm_instructions_update")
        
        # 5. –£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        dp.callback_query.register(handler.cb_delete_agent, F.data == "content_delete_agent")
        dp.callback_query.register(handler.cb_confirm_delete_agent, F.data == "content_confirm_delete")
        
        # 6. –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤
        dp.callback_query.register(handler.cb_rewrite_post, F.data == "content_rewrite")
        dp.callback_query.register(handler.cb_exit_rewrite_mode, F.data == "content_exit_rewrite")
        
        # 7. –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        dp.callback_query.register(handler.cb_edit_post, F.data == "content_edit_post")
        dp.callback_query.register(handler.cb_publish_post, F.data == "content_publish")
        
        # 8. FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if CONTENT_STATES_AVAILABLE:
            dp.message.register(
                handler.handle_agent_name_input,
                ContentStates.waiting_for_agent_name
            )
            dp.message.register(
                handler.handle_agent_instructions_input,
                ContentStates.waiting_for_agent_instructions
            )
            dp.message.register(
                handler.handle_edit_agent_name_input,
                ContentStates.editing_agent_name
            )
            dp.message.register(
                handler.handle_edit_agent_instructions_input,
                ContentStates.editing_agent_instructions
            )
            dp.message.register(
                handler.handle_rewrite_post_input,
                ContentStates.waiting_for_rewrite_post
            )
            # –ù–æ–≤—ã–µ FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            dp.message.register(
                handler.handle_channel_post_input,
                ContentStates.waiting_for_channel_post
            )
            dp.message.register(
                handler.handle_edit_instructions_input,
                ContentStates.waiting_for_edit_instructions
            )
            
            logger.info("‚úÖ All FSM message handlers registered successfully")
        else:
            logger.warning("‚ö†Ô∏è FSM states unavailable, some functionality will be limited")
        
        total_handlers = 14 + (7 if CONTENT_STATES_AVAILABLE else 0) + (1 if MEDIA_GROUP_AVAILABLE else 0)
        
        logger.info("‚úÖ Content handlers registered successfully", 
                   bot_id=bot_config['bot_id'],
                   callback_handlers=14,
                   fsm_handlers=7 if CONTENT_STATES_AVAILABLE else 0,
                   media_group_handlers=1 if MEDIA_GROUP_AVAILABLE else 0,
                   total_handlers=total_handlers)
        
    except Exception as e:
        logger.error("üí• Failed to register content handlers", 
                    bot_id=kwargs.get('bot_config', {}).get('bot_id', 'unknown'),
                    error=str(e),
                    error_type=type(e).__name__,
                    exc_info=True)
        raise


class ContentHandler:
    """‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é + –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã + —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ + –∫–∞–Ω–∞–ª—ã"""
    
    def __init__(self, db, bot_config: dict, user_bot):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.bot_username = bot_config['bot_username']
        self.user_bot = user_bot
        self.formatter = MessageFormatter()
        self.logger = structlog.get_logger()
        
        self.logger.info("üîß ContentHandler initialized with channels and editing support", 
                        bot_id=self.bot_id,
                        bot_username=self.bot_username,
                        owner_user_id=self.owner_user_id)
    
    # ===== UTILITY METHODS =====
    
    def _is_owner(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        is_owner = user_id == self.owner_user_id
        self.logger.debug("üë§ Owner check", 
                         bot_id=self.bot_id,
                         user_id=user_id,
                         owner_user_id=self.owner_user_id,
                         is_owner=is_owner)
        return is_owner
    
    async def _get_content_keyboards(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–Ω–∞–ª–æ–≤"""
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboards = {
            'main_menu_no_agent': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ú® –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="content_create_agent")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
            ]),
            
            'main_menu_with_agent': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–∞", callback_data="content_rewrite")],
                [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º", callback_data="content_manage")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main")]
            ]),
            
            'create_confirmation': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="content_confirm_create")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="content_main")]
            ]),
            
            'manage_menu': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="content_settings")],
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞", callback_data="content_delete_agent")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="content_main")]
            ]),
            
            'settings_menu': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="content_edit_name")],
                [InlineKeyboardButton(text="üìã –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="content_edit_instructions")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="content_manage")]
            ]),
            
            'delete_confirmation': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="content_confirm_delete")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="content_manage")]
            ]),
            
            'rewrite_mode': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ—Ä–∞–π—Ç", callback_data="content_exit_rewrite")]
            ]),
            
            'back_to_main': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_data="content_main")]
            ]),
            
            'back_to_settings': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="content_settings")]
            ]),
            
            # –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'post_actions': InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", callback_data="content_edit_post"),
                    InlineKeyboardButton(text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="content_publish")
                ],
                [InlineKeyboardButton(text="üîÑ –†–µ–∂–∏–º —Ä–µ—Ä–∞–π—Ç–∞", callback_data="content_rewrite")]
            ]),
            
            'back_to_rewrite': InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ö —Ä–µ—Ä–∞–π—Ç—É", callback_data="content_rewrite")]
            ])
        }
        
        return keyboards
    
    def _format_number(self, number: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
        return f"{number:,}".replace(",", " ")
    
    def _format_date(self, date_str: str = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
        if not date_str:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            from datetime import datetime
            return datetime.now().strftime("%d.%m.%Y %H:%M")
        
        try:
            from datetime import datetime
            if isinstance(date_str, str):
                dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            else:
                dt = date_str
            return dt.strftime("%d.%m.%Y %H:%M")
        except:
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"
    
    def _truncate_text(self, text: str, max_length: int) -> str:
        """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è"""
        if not text:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        if len(text) <= max_length:
            return text
        
        return text[:max_length-3] + "..."
    
    def _safe_get_from_result(self, result: Dict, key: str, default=None):
        """üîß –ù–û–í–û–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ result —Å–ª–æ–≤–∞—Ä—è"""
        try:
            return result.get(key, default)
        except (AttributeError, TypeError):
            self.logger.warning(f"‚ö†Ô∏è Failed to get key '{key}' from result", 
                               result_type=type(result).__name__)
            return default
    
    # ===== MAIN MENU =====
    
    async def cb_content_main(self, callback: CallbackQuery):
        """‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.logger.info("üìù Content main menu accessed", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id,
                        callback_data=callback.data)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            self.logger.warning("üö´ Access denied for non-owner", 
                               user_id=callback.from_user.id,
                               bot_id=self.bot_id)
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≥–µ–Ω—Ç–∞
            self.logger.debug("üîç Checking for existing content agent", bot_id=self.bot_id)
            has_agent = await content_agent_service.has_content_agent(self.bot_id)
            self.logger.info("üìä Content agent check result", bot_id=self.bot_id, has_agent=has_agent)
            
            keyboards = await self._get_content_keyboards()
            
            if has_agent:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
                self.logger.debug("üìã Loading agent info", bot_id=self.bot_id)
                agent_info = await content_agent_service.get_agent_info(self.bot_id)
                
                if agent_info:
                    stats = agent_info.get('stats', {})
                    
                    text = f"""
üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞–Ω–∞–ª–∞ @{self.bot_username}</b>

‚úÖ <b>–ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:</b> {agent_info['name']}
ü§ñ <b>OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</b> {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞' if stats.get('has_openai_id') else '‚ùå –û—à–∏–±–∫–∞'}
üí∞ <b>–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {self._format_number(stats.get('tokens_used', 0))}

üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞:</b>
<i>{self._truncate_text(agent_info['instructions'], 200)}</i>

üéØ <b>–ß—Ç–æ —É–º–µ–µ—Ç –∞–≥–µ–Ω—Ç:</b>
‚Ä¢ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–º—ã—Å–ª, –º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –ø–æ–¥–∞—á–∏  
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ (file_id —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
‚Ä¢ ‚ú® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–ª—å–±–æ–º—ã (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã)
‚Ä¢ üîó –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫–∏
‚Ä¢ ‚úèÔ∏è –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏
‚Ä¢ üì§ –ü—É–±–ª–∏–∫—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª—ã
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
                    keyboard = keyboards['main_menu_with_agent']
                    self.logger.info("üìã Agent info loaded successfully", 
                                   bot_id=self.bot_id,
                                   agent_name=agent_info['name'])
                else:
                    text = f"""
üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞–Ω–∞–ª–∞ @{self.bot_username}</b>

‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–∞</b>

–ê–≥–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞.

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
                    keyboard = keyboards['main_menu_with_agent']
                    self.logger.warning("‚ö†Ô∏è Agent exists but failed to load info", bot_id=self.bot_id)
            else:
                media_group_status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if MEDIA_GROUP_AVAILABLE else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                
                text = f"""
üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞–Ω–∞–ª–∞ @{self.bot_username}</b>

‚ùå <b>–ê–≥–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω</b>

–î–ª—è —Ä–µ—Ä–∞–π—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ò–ò –∞–≥–µ–Ω—Ç–∞:

üéØ <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç:</b>
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ò–ò –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ OpenAI GPT-4o
‚Ä¢ –°–ª–µ–¥—É–µ—Ç –≤–∞—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ —Å—Ç–∏–ª—é
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ)
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ª—å–±–æ–º—ã (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã)
‚Ä¢ üîó –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Å—ã–ª–∫–∏
‚Ä¢ ‚úèÔ∏è –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
‚Ä¢ üì§ –ü—É–±–ª–∏–∫—É–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª—ã

üìã <b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞" 
2. –£–∫–∞–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
3. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞
4. –û–ø–∏—à–∏—Ç–µ –∫–∞–∫ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
5. –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

üîß <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>
‚Ä¢ –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {media_group_status}
‚Ä¢ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' if CONTENT_STATES_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}

<b>–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å–µ–π—á–∞—Å?</b>
"""
                keyboard = keyboards['main_menu_no_agent']
                self.logger.info("üìã No agent found, showing creation menu", bot_id=self.bot_id)
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
            self.logger.info("‚úÖ Content main menu displayed successfully", 
                           bot_id=self.bot_id,
                           has_agent=has_agent)
            
        except Exception as e:
            self.logger.error("üí• Failed to show content main menu", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞", show_alert=True)
    
    # ===== AGENT CREATION =====
    
    async def cb_create_agent(self, callback: CallbackQuery, state: FSMContext):
        """–ò–ó–ú–ï–ù–ï–ù–û: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ - —Å–Ω–∞—á–∞–ª–∞ –∫–∞–Ω–∞–ª"""
        self.logger.info("‚ú® Create agent button pressed", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id,
                        callback_data=callback.data)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            self.logger.warning("üö´ Non-owner tried to create agent", 
                               user_id=callback.from_user.id,
                               bot_id=self.bot_id)
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–≥–µ–Ω—Ç
            self.logger.debug("üîç Checking existing agent before creation", bot_id=self.bot_id)
            has_agent = await content_agent_service.has_content_agent(self.bot_id)
            
            if has_agent:
                self.logger.warning("‚ö†Ô∏è Agent already exists, creation blocked", bot_id=self.bot_id)
                await callback.answer("–ê–≥–µ–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω", show_alert=True)
                return
            
            text = f"""
‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞</b>

<b>–®–∞–≥ 1 –∏–∑ 3: –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–æ–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª, –∫—É–¥–∞ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –ø–æ—Å—Ç—ã.

üìù <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:</b>
1. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞–Ω–∞–ª
3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª–µ.

<b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await callback.message.edit_text(text, reply_markup=keyboards['back_to_main'])
            
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.waiting_for_channel_post)
                self.logger.info("‚úÖ FSM state set for channel post input", bot_id=self.bot_id)
            else:
                self.logger.warning("‚ö†Ô∏è FSM states not available, using fallback", bot_id=self.bot_id)
            
            self.logger.info("‚úÖ Agent creation flow started successfully", 
                           bot_id=self.bot_id,
                           user_id=callback.from_user.id)
            
        except Exception as e:
            self.logger.error("üí• Failed to start agent creation", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞", show_alert=True)
    
    async def handle_channel_post_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        self.logger.info("üì∫ Channel post input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id)
        
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
            if not message.forward_from_chat:
                await message.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ –ø–µ—Ä–µ—Å–ªa–Ω–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞")
                return
            
            if message.forward_from_chat.type != "channel":
                await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ –∫–∞–Ω–∞–ª–∞")
                return
            
            channel_id = message.forward_from_chat.id
            channel_title = message.forward_from_chat.title
            channel_username = message.forward_from_chat.username
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_data = {
                'chat_id': channel_id,
                'chat_title': channel_title,
                'chat_username': channel_username,
                'chat_type': 'channel'
            }
            
            success = await content_agent_service.content_manager.save_channel_info(
                self.bot_id, channel_data
            )
            
            if not success:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                return
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –∏–º—è –∞–≥–µ–Ω—Ç–∞
            text = f"""
‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_title}
üÜî <b>ID:</b> <code>{channel_id}</code>
üë§ <b>Username:</b> @{channel_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}

<b>–®–∞–≥ 2 –∏–∑ 3: –ò–º—è –∞–≥–µ–Ω—Ç–∞</b>

–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞:

üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
- "–†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ {channel_title}"
- "–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"
- "SMM –ø–æ–º–æ—â–Ω–∏–∫"

<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞:</b>
"""
            
            await message.answer(text)
            await state.set_state(ContentStates.waiting_for_agent_name)
            
            self.logger.info("‚úÖ Channel saved successfully", 
                           bot_id=self.bot_id,
                           channel_id=channel_id,
                           channel_title=channel_title)
            
        except Exception as e:
            self.logger.error("üí• Error processing channel post", 
                            bot_id=self.bot_id,
                            error=str(e))
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞")
    
    async def handle_agent_name_input(self, message: Message, state: FSMContext):
        """‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        self.logger.info("üìù Agent name input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id,
                        message_length=len(message.text or ""))
        
        if not self._is_owner(message.from_user.id):
            self.logger.warning("üö´ Non-owner tried to input agent name", 
                               user_id=message.from_user.id)
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            agent_name = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
            if not agent_name:
                self.logger.debug("‚ùå Empty agent name provided", bot_id=self.bot_id)
                await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(agent_name) < 3:
                self.logger.debug("‚ùå Agent name too short", bot_id=self.bot_id, length=len(agent_name))
                await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(agent_name) > 100:
                self.logger.debug("‚ùå Agent name too long", bot_id=self.bot_id, length=len(agent_name))
                await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(agent_name=agent_name)
            
            text = f"""
‚ú® <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞</b>

<b>–®–∞–≥ 3 –∏–∑ 3: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞</b>

üë§ <b>–ò–º—è –∞–≥–µ–Ω—Ç–∞:</b> {agent_name}

–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, –ö–ê–ö –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã. –≠—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Ä–∞–π—Ç–æ–≤.

üìù <b>–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:</b>

<b>–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å—Ç–∏–ª—å:</b>
"–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π —Ç–µ–∫—Å—Ç—ã –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º, —Ç–µ–ø–ª–æ–º —Ç–æ–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —á–∏—Ç–∞—Ç–µ–ª—é. –î–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –∂–∏–≤—ã–º –∏ –±–ª–∏–∑–∫–∏–º."

<b>–î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å:</b>  
"–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–º —Å—Ç–∏–ª–µ. –£–±–∏—Ä–∞–π –ª–∏—à–Ω–∏–µ —ç–º–æ—Ü–∏–∏, –¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–∏–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º. –§–æ–∫—É—Å –Ω–∞ —Ñ–∞–∫—Ç–∞—Ö."

<b>–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥:</b>
"–î–µ–ª–∞–π —Ç–µ–∫—Å—Ç—ã –±–æ–ª–µ–µ —è—Ä–∫–∏–º–∏ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º–∏—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ü—Ä–∏–≤–ª–µ–∫–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞–º–∏."

<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await message.answer(
                text,
                reply_markup=keyboards['back_to_main']
            )
            
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.waiting_for_agent_instructions)
            
            self.logger.info("‚úÖ Agent name validated and saved", 
                           bot_id=self.bot_id,
                           agent_name=agent_name,
                           name_length=len(agent_name))
            
        except Exception as e:
            self.logger.error("üí• Failed to process agent name input", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def handle_agent_instructions_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üìã Agent instructions input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id,
                        instructions_length=len(message.text or ""))
        
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            instructions = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            if not instructions:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(instructions) < 10:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤). –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
                return
            
            if len(instructions) > 2000:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ:")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è
            data = await state.get_data()
            agent_name = data.get('agent_name')
            
            if not agent_name:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω–æ –∏–º—è –∞–≥–µ–Ω—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
                await state.clear()
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            text = f"""
‚ú® <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞</b>

üë§ <b>–ò–º—è –∞–≥–µ–Ω—Ç–∞:</b> {agent_name}

üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
{instructions}

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –ú–æ–¥–µ–ª—å: OpenAI GPT-4o
‚Ä¢ –¢–∏–ø: Responses API  
‚Ä¢ –¢–æ–∫–µ–Ω—ã: –∏–∑ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞
‚Ä¢ –ú–µ–¥–∏–∞: —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ (file_id —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
‚Ä¢ –ê–ª—å–±–æ–º—ã: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è' if MEDIA_GROUP_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ üîó –°—Å—ã–ª–∫–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –≤–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ –≤ –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
‚Ä¢ üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª—ã

‚ö†Ô∏è <b>–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é.</b>

<b>–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ —Å —ç—Ç–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏?</b>
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                agent_name=agent_name,
                instructions=instructions
            )
            
            keyboards = await self._get_content_keyboards()
            
            await message.answer(
                text,
                reply_markup=keyboards['create_confirmation']
            )
            
            self.logger.info("‚úÖ Agent instructions validated and preview shown", 
                           bot_id=self.bot_id,
                           agent_name=agent_name,
                           instructions_length=len(instructions))
            
        except Exception as e:
            self.logger.error("üí• Failed to process agent instructions input", 
                            bot_id=self.bot_id,
                            error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def cb_confirm_create_agent(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("‚úÖ Agent creation confirmation received", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            agent_name = data.get('agent_name')
            instructions = data.get('instructions')
            
            if not agent_name or not instructions:
                await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã", show_alert=True)
                await state.clear()
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
            await callback.message.edit_text(
                f"‚è≥ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ '{agent_name}'...</b>\n\n"
                f"ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n"
                f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n\n"
                f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            self.logger.info("üé® Creating content agent via service", 
                           bot_id=self.bot_id,
                           agent_name=agent_name,
                           instructions_length=len(instructions),
                           user_id=callback.from_user.id)
            
            result = await content_agent_service.create_content_agent(
                bot_id=self.bot_id,
                agent_name=agent_name,
                instructions=instructions,
                user_id=callback.from_user.id
            )
            
            keyboards = await self._get_content_keyboards()
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
                agent_data = result.get('agent', {})
                
                text = f"""
‚úÖ <b>–ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üë§ <b>–ò–º—è:</b> {agent_data.get('name', agent_name)}
ü§ñ <b>OpenAI ID:</b> {agent_data.get('openai_agent_id', '–ù–µ —É–∫–∞–∑–∞–Ω')[:20]}...
üíæ <b>–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î:</b> ID {agent_data.get('id', 'Unknown')}

üéØ <b>–ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>

üìù –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª—å–±–æ–º—ã –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ {'‚úÖ' if MEDIA_GROUP_AVAILABLE else '‚ùå (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)'}
‚Ä¢ üîó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –ø–æ—Å—Ç–∞—Ö (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
‚Ä¢ üì§ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–≥–µ–Ω—Ç–∞  
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

<b>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—Ä–∞–π—Ç—É –ø–æ—Å—Ç–æ–≤?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤", callback_data="content_rewrite")],
                    [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard)
                
                self.logger.info("‚úÖ Content agent created successfully", 
                               bot_id=self.bot_id,
                               agent_name=agent_name,
                               agent_id=agent_data.get('id'),
                               openai_agent_id=agent_data.get('openai_agent_id'))
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
                error_message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}

üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

<b>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="content_create_agent")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="content_main")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard)
                
                self.logger.error("‚ùå Content agent creation failed", 
                               bot_id=self.bot_id,
                               agent_name=agent_name,
                               error=result.get('error'),
                               message=error_message)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            self.logger.error("üí• Failed to confirm agent creation", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            
            await callback.message.edit_text(
                f"üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞</b>\n\n"
                f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            await state.clear()
    
    # ===== AGENT MANAGEMENT =====
    
    async def cb_manage_agent(self, callback: CallbackQuery):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º"""
        self.logger.info("‚öôÔ∏è Agent management accessed", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            stats = agent_info.get('stats', {})
            
            text = f"""
‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º</b>

üë§ <b>–ò–º—è:</b> {agent_info['name']}
ü§ñ <b>OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if stats.get('has_openai_id') else '‚ùå –û—à–∏–±–∫–∞'}
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {self._format_date(agent_info.get('created_at'))}
üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {self._format_date(agent_info.get('updated_at'))}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self._format_number(stats.get('tokens_used', 0))}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {self._format_date(stats.get('last_usage_at')) or '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è'}

üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞:</b>
<i>{self._truncate_text(agent_info['instructions'], 300)}</i>

üîß <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–ª—å–±–æ–º—ã: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è' if MEDIA_GROUP_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' if CONTENT_STATES_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ üîó –°—Å—ã–ª–∫–∏: ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –í–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫
‚Ä¢ üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª—ã

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboards['manage_menu']
            )
            
            self.logger.info("‚úÖ Agent management menu displayed", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'])
            
        except Exception as e:
            self.logger.error("üí• Failed to show agent management", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º", show_alert=True)
    
    async def cb_agent_settings(self, callback: CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("‚öôÔ∏è Agent settings accessed", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            stats = agent_info.get('stats', {})
            
            text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞</b>

üë§ <b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {agent_info['name']}
üîó <b>OpenAI Agent ID:</b> <code>{agent_info.get('openai_agent_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {self._format_date(agent_info.get('created_at'))}
üîÑ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {self._format_date(agent_info.get('updated_at'))}

üìã <b>–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
<i>{self._truncate_text(agent_info['instructions'], 400)}</i>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {self._format_number(stats.get('tokens_used', 0))}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {self._format_date(stats.get('last_usage_at')) or '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è'}
‚Ä¢ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if stats.get('has_openai_id') else '‚ùå –û—à–∏–±–∫–∞'}

üîß <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ê–ª—å–±–æ–º—ã: {'‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è' if MEDIA_GROUP_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã' if CONTENT_STATES_AVAILABLE else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}
‚Ä¢ üîó –°—Å—ã–ª–∫–∏: ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ‚úÖ –í–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ –≤ –≥–æ—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
‚Ä¢ üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: ‚úÖ –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª—ã

<b>–ß—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:</b>
‚Ä¢ –ò–º—è –∞–≥–µ–Ω—Ç–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–µ—Ä–∞–π—Ç–∞ (–≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏)

<b>–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboards['settings_menu']
            )
            
            self.logger.info("‚úÖ Agent settings menu displayed", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'])
            
        except Exception as e:
            self.logger.error("üí• Failed to show agent settings", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞", show_alert=True)
    
    # ===== AGENT EDITING =====
    
    async def cb_edit_agent_name(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üìù Edit agent name started", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            text = f"""
üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞</b>

üë§ <b>–¢–µ–∫—É—â–µ–µ –∏–º—è:</b> {agent_info['name']}

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞. –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
‚Ä¢ –û—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ü–æ–Ω—è—Ç–Ω—ã–º –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á

üìù <b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –∏–º–µ–Ω:</b>
‚Ä¢ "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä"
‚Ä¢ "–î–µ–ª–æ–≤–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä"
‚Ä¢ "SMM –ø–æ–º–æ—â–Ω–∏–∫ Pro"
‚Ä¢ "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä–µ—Ä–∞–π—Ç–µ—Ä"

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ò–º—è –∏–∑–º–µ–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±–æ—Ç–∞. OpenAI –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–µ–º –∂–µ, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω—è—Ç—Å—è.

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboards['back_to_settings']
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            await state.update_data(
                current_agent_name=agent_info['name'],
                agent_id=agent_info.get('id')
            )
            
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.editing_agent_name)
            
            self.logger.info("‚úÖ Agent name editing flow started", 
                           bot_id=self.bot_id,
                           current_name=agent_info['name'],
                           user_id=callback.from_user.id)
            
        except Exception as e:
            self.logger.error("üí• Failed to start agent name editing", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏", show_alert=True)
    
    async def handle_edit_agent_name_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üìù Edit agent name input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id)
        
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            new_name = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
            if not new_name:
                await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(new_name) < 3:
                await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(new_name) > 100:
                await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            current_name = data.get('current_agent_name')
            
            if not current_name:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:")
                await state.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ –∏–º—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            if new_name == current_name:
                await message.answer("‚ùå –ù–æ–≤–æ–µ –∏–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            processing_msg = await message.answer(
                f"‚è≥ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≥–µ–Ω—Ç–∞...</b>\n\n"
                f"üìù –°—Ç–∞—Ä–æ–µ –∏–º—è: {current_name}\n"
                f"‚ú® –ù–æ–≤–æ–µ –∏–º—è: {new_name}\n\n"
                f"üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await content_agent_service.update_agent(
                bot_id=self.bot_id,
                agent_name=new_name
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                await processing_msg.delete()
            except:
                pass
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                text = f"""
‚úÖ <b>–ò–º—è –∞–≥–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>

üìù <b>–°—Ç–∞—Ä–æ–µ –∏–º—è:</b> {current_name}
‚ú® <b>–ù–æ–≤–æ–µ –∏–º—è:</b> {new_name}
üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–æ:</b> {self._format_date()}

üéØ <b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:</b>
‚Ä¢ –ò–º—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–¥ –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
‚Ä¢ OpenAI –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–ª—Å—è —Ç–µ–º –∂–µ

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="content_edit_instructions")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="content_settings")],
                    [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
                ])
                
                await message.answer(text, reply_markup=keyboard)
                
                self.logger.info("‚úÖ Agent name updated successfully", 
                               bot_id=self.bot_id,
                               old_name=current_name,
                               new_name=new_name)
            else:
                # –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                error_message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}

üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–º—è
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

<b>–¢–µ–∫—É—â–µ–µ –∏–º—è –æ—Å—Ç–∞–µ—Ç—Å—è:</b> {current_name}
"""
                
                keyboards = await self._get_content_keyboards()
                
                await message.answer(
                    text,
                    reply_markup=keyboards['back_to_settings']
                )
                
                self.logger.error("‚ùå Agent name update failed", 
                               bot_id=self.bot_id,
                               old_name=current_name,
                               new_name=new_name,
                               error=result.get('error'),
                               message=error_message)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            self.logger.error("üí• Failed to handle agent name edit input", 
                            bot_id=self.bot_id,
                            error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def cb_edit_agent_instructions(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üìã Edit agent instructions started", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            text = f"""
üìã <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞</b>

üë§ <b>–ê–≥–µ–Ω—Ç:</b> {agent_info['name']}

üìù <b>–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
<i>{agent_info['instructions']}</i>

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
‚Ä¢ –û—Ç 10 –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ß–µ—Ç–∫–∏–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –¥–ª—è –ò–ò
‚Ä¢ –û–ø–∏—Å—ã–≤–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏

üìã <b>–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:</b>

<b>–î–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π:</b>
"–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π –≤ –ª–µ–≥–∫–æ–º, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ. –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∂–∏, –¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –±–æ–ª–µ–µ –∂–∏–≤—ã–º –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å–æ—Ü—Å–µ—Ç–µ–π."

<b>–î–ª—è –±–∏–∑–Ω–µ—Å–∞:</b>
"–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —É–±–∏—Ä–∞–π –ª–∏—à–Ω–∏–µ —ç–º–æ—Ü–∏–∏, —Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ñ–∞–∫—Ç–∞—Ö –∏ –≤—ã–≥–æ–¥–∞—Ö."

‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b> –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –±—É–¥—É—â–∏–µ —Ä–µ—Ä–∞–π—Ç—ã. OpenAI –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboards['back_to_settings']
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                current_instructions=agent_info['instructions'],
                agent_id=agent_info.get('id'),
                agent_name=agent_info['name']
            )
            
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.editing_agent_instructions)
            
            self.logger.info("‚úÖ Agent instructions editing flow started", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'],
                           current_instructions_length=len(agent_info['instructions']),
                           user_id=callback.from_user.id)
            
        except Exception as e:
            self.logger.error("üí• Failed to start agent instructions editing", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π", show_alert=True)
    
    async def handle_edit_agent_instructions_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üìã Edit agent instructions input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id,
                        instructions_length=len(message.text or ""))
        
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            new_instructions = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
            if not new_instructions:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(new_instructions) < 10:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤). –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
                return
            
            if len(new_instructions) > 2000:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ:")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            current_instructions = data.get('current_instructions')
            agent_name = data.get('agent_name')
            
            if not current_instructions or not agent_name:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ—Ç–µ—Ä—è–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ:")
                await state.clear()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç —Ç–µ–∫—É—â–∏—Ö
            if new_instructions == current_instructions:
                await message.answer("‚ùå –ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–∫—É—â–∏–º–∏. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
            text = f"""
üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π</b>

üë§ <b>–ê–≥–µ–Ω—Ç:</b> {agent_name}

üìù <b>–°—Ç–∞—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
<i>{self._truncate_text(current_instructions, 300)}</i>

‚ú® <b>–ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
<i>{self._truncate_text(new_instructions, 300)}</i>

üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>
‚Ä¢ –î–ª–∏–Ω–∞: {len(current_instructions)} ‚Üí {len(new_instructions)} —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'+' if len(new_instructions) > len(current_instructions) else ''}{len(new_instructions) - len(current_instructions)} —Å–∏–º–≤–æ–ª–æ–≤

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b>
‚Ä¢ OpenAI –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
‚Ä¢ –≠—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –±—É–¥—É—â–∏–µ —Ä–µ—Ä–∞–π—Ç—ã
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å (–Ω–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ)

<b>–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?</b>
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                current_instructions=current_instructions,
                new_instructions=new_instructions,
                agent_name=agent_name
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="content_confirm_instructions_update")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="content_settings")]
            ])
            
            await message.answer(text, reply_markup=keyboard)
            
            self.logger.info("‚úÖ Agent instructions change preview shown", 
                           bot_id=self.bot_id,
                           agent_name=agent_name,
                           old_length=len(current_instructions),
                           new_length=len(new_instructions))
            
        except Exception as e:
            self.logger.error("üí• Failed to handle agent instructions edit input", 
                            bot_id=self.bot_id,
                            error=str(e))
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    
    async def cb_confirm_instructions_update(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("‚úÖ Instructions update confirmation received", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            current_instructions = data.get('current_instructions')
            new_instructions = data.get('new_instructions')
            agent_name = data.get('agent_name')
            
            if not all([current_instructions, new_instructions, agent_name]):
                await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã", show_alert=True)
                await state.clear()
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await callback.message.edit_text(
                f"‚è≥ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–∞ '{agent_name}'...</b>\n\n"
                f"ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ OpenAI –∞–≥–µ–Ω—Ç–∞...\n"
                f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...\n"
                f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...\n\n"
                f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await content_agent_service.update_agent(
                bot_id=self.bot_id,
                instructions=new_instructions
            )
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                text = f"""
‚úÖ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>

üë§ <b>–ê–≥–µ–Ω—Ç:</b> {agent_name}
üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–æ:</b> {self._format_date()}
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã:</b> {'+' if len(new_instructions) > len(current_instructions) else ''}{len(new_instructions) - len(current_instructions)} —Å–∏–º–≤–æ–ª–æ–≤

üìã <b>–ù–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>
<i>{self._truncate_text(new_instructions, 400)}</i>

üéØ <b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:</b>
‚Ä¢ OpenAI –∞–≥–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
‚Ä¢ –í—Å–µ –±—É–¥—É—â–∏–µ —Ä–µ—Ä–∞–π—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ

<b>–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìù –¢–µ—Å—Ç —Ä–µ—Ä–∞–π—Ç–∞", callback_data="content_rewrite")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="content_settings")],
                    [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard)
                
                self.logger.info("‚úÖ Agent instructions updated successfully", 
                               bot_id=self.bot_id,
                               agent_name=agent_name,
                               old_length=len(current_instructions),
                               new_length=len(new_instructions))
            else:
                # –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                error_message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}

üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

<b>–¢–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.</b>

<b>–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="content_edit_instructions")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="content_settings")],
                    [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard)
                
                self.logger.error("‚ùå Agent instructions update failed", 
                               bot_id=self.bot_id,
                               agent_name=agent_name,
                               error=result.get('error'),
                               message=error_message)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        except Exception as e:
            self.logger.error("üí• Failed to confirm instructions update", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            
            await callback.message.edit_text(
                f"üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π</b>\n\n"
                f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            await state.clear()
    
    # ===== AGENT DELETION =====
    
    async def cb_delete_agent(self, callback: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üóëÔ∏è Delete agent confirmation requested", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            stats = agent_info.get('stats', {})
            
            text = f"""
üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞</b>

üë§ <b>–ê–≥–µ–Ω—Ç:</b> {agent_info['name']}
üí∞ <b>–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {self._format_number(stats.get('tokens_used', 0))}

‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>
–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞:
‚Ä¢ –ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ OpenAI
‚Ä¢ –î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –±—É–¥—É—Ç –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è
‚Ä¢ –†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª—ã —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

‚ùì <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞?</b>

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.
"""
            
            keyboards = await self._get_content_keyboards()
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboards['delete_confirmation']
            )
            
            self.logger.info("üóëÔ∏è Agent deletion confirmation shown", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'])
            
        except Exception as e:
            self.logger.error("üí• Failed to show agent deletion confirmation", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
    
    async def cb_confirm_delete_agent(self, callback: CallbackQuery):
        """‚úÖ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.logger.info("üóëÔ∏è Agent deletion confirmed", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è
            await callback.message.edit_text(
                "‚è≥ <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...</b>\n\n"
                "ü§ñ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ OpenAI...\n"
                "üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n\n"
                "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥</i>"
            )
            
            # –£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await content_agent_service.delete_agent(self.bot_id)
            
            if result['success']:
                deleted_agent = result.get('deleted_agent', {})
                
                text = f"""
‚úÖ <b>–ê–≥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ</b>

üë§ <b>–£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç:</b> {deleted_agent.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}
ü§ñ <b>OpenAI –æ—á–∏—â–µ–Ω:</b> {'‚úÖ' if deleted_agent.get('had_openai_integration') else '–ù–µ —Ç—Ä–µ–±–æ–≤–∞–ª—Å—è'}

üìä <b>–ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å:</b>
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ –ó–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞

üí° <b>–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.</b>

<b>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞?</b>
"""
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ú® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞", callback_data="content_create_agent")],
                    [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard)
                
                self.logger.info("‚úÖ Content agent deleted successfully", 
                               bot_id=self.bot_id,
                               deleted_agent_name=deleted_agent.get('name'))
                               
            else:
                error_message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                
                text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}

üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

–ê–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ —É–¥–∞–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
"""
                
                keyboards = await self._get_content_keyboards()
                
                await callback.message.edit_text(
                    text,
                    reply_markup=keyboards['back_to_main']
                )
                
                self.logger.error("‚ùå Content agent deletion failed", 
                               bot_id=self.bot_id,
                               error=result.get('error'),
                               message=error_message)
            
        except Exception as e:
            self.logger.error("üí• Failed to confirm agent deletion", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            
            await callback.message.edit_text(
                f"üí• <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    # ===== REWRITE FUNCTIONALITY =====
    
    async def cb_rewrite_post(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–∂–∏–º–∞ —Ä–µ—Ä–∞–π—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
        self.logger.info("üìù Rewrite mode requested", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≥–µ–Ω—Ç–∞
            agent_info = await content_agent_service.get_agent_info(self.bot_id)
            
            if not agent_info:
                await callback.answer("–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
                return
            
            stats = agent_info.get('stats', {})
            
            if not stats.get('has_openai_id'):
                await callback.answer("–û—à–∏–±–∫–∞ OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–∞.", show_alert=True)
                return
            
            text = f"""
üìù <b>–†–µ—Ä–∞–π—Ç –ø–æ—Å—Ç–æ–≤</b>

üë§ <b>–ê–∫—Ç–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç:</b> {agent_info['name']}
üí∞ <b>–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {self._format_number(stats.get('tokens_used', 0))}

üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞:</b>
<i>{self._truncate_text(agent_info['instructions'], 200)}</i>

üìé <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>
‚Ä¢ –¢–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ
‚Ä¢ –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ  
‚Ä¢ –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
‚Ä¢ GIF/–∞–Ω–∏–º–∞—Ü–∏–∏
‚Ä¢ ‚ú® –ê–ª—å–±–æ–º—ã (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã) {'‚úÖ' if MEDIA_GROUP_AVAILABLE else '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
‚Ä¢ üîó –°—Å—ã–ª–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)

üéØ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
2. ‚ú® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ä–µ—Ä–∞–π—Ç–∞
3. üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ - –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è
4. –ê–≥–µ–Ω—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
5. –ü–æ–ª—É—á–∞–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚úèÔ∏è –ø—Ä–∞–≤–∫–∏ –∏ üì§ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π —Ä–µ—Ä–∞–π—Ç —Ç—Ä–∞—Ç–∏—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 3 —Å–∏–º–≤–æ–ª–∞
‚Ä¢ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è file_id)
‚Ä¢ –ê–ª—å–±–æ–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ
‚Ä¢ –°—Å—ã–ª–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∞–≥–µ–Ω—Ç—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
‚Ä¢ –ü–æ—Å–ª–µ —Ä–µ—Ä–∞–π—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∞–≤–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è

<b>–ü—Ä–∏—à–ª–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboards['rewrite_mode']
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.waiting_for_rewrite_post)
            
            self.logger.info("‚úÖ Rewrite mode activated successfully", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'],
                           user_id=callback.from_user.id)
            
        except Exception as e:
            self.logger.error("üí• Failed to start rewrite mode", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–∂–∏–º–∞ —Ä–µ—Ä–∞–π—Ç–∞", show_alert=True)
    
    async def handle_rewrite_post_input(self, message: Message, state: FSMContext):
        """‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞"""
        self.logger.info("üìù Rewrite post input received", 
                        user_id=message.from_user.id,
                        bot_id=self.bot_id,
                        message_id=message.message_id,
                        has_photo=bool(message.photo),
                        has_video=bool(message.video),
                        has_text=bool(message.text),
                        has_caption=bool(message.caption))
        
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await message.answer(
                "‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ—Å—Ç...</b>\n\n"
                "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...\n"
                "üîó –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫...\n"
                "ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç—É...\n"
                "üí∞ –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤...\n\n"
                "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-15 —Å–µ–∫—É–Ω–¥</i>"
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–π—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            result = await content_agent_service.rewrite_post(
                bot_id=self.bot_id,
                message=message,
                user_id=message.from_user.id
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                await processing_msg.delete()
            except:
                pass
            
            if result['success']:
                # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ—Ä–∞–π—Ç
                await self._send_rewrite_result(message, result)
                
                self.logger.info("‚úÖ Post rewritten successfully", 
                               bot_id=self.bot_id,
                               original_length=len(result['content']['original_text']),
                               rewritten_length=len(result['content']['rewritten_text']),
                               tokens_used=result['tokens']['total_tokens'],
                               has_media=result['has_media'],
                               has_links=result.get('has_links', False))
            else:
                # –û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞
                await self._send_rewrite_error(message, result)
                
                self.logger.error("‚ùå Post rewrite failed", 
                               bot_id=self.bot_id,
                               error=result.get('error'),
                               message=result.get('message'))
            
        except Exception as e:
            self.logger.error("üí• Failed to handle rewrite post input", 
                            bot_id=self.bot_id,
                            message_id=message.message_id,
                            error=str(e),
                            error_type=type(e).__name__,
                            exc_info=True)
            
            await message.answer(
                f"üí• <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞</b>\n\n"
                f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    
    # ===== ‚ú® MEDIA GROUP HANDLERS =====
    
    async def handle_media_group_rewrite_input(self, messages: List[Message], state: FSMContext):
        """‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Å—ã–ª–æ–∫"""
        
        self.logger.info("üì∏ Processing media group for rewrite with links support", 
                        bot_id=self.bot_id,
                        media_count=len(messages),
                        media_group_id=messages[0].media_group_id)
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await messages[0].answer(
                f"‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞–ª—å–±–æ–º ({len(messages)} —Ñ–∞–π–ª–æ–≤)...</b>\n\n"
                f"üîç –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤...\n"
                f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...\n"
                f"üîó –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫...\n"
                f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≥–µ–Ω—Ç—É...\n\n"
                f"<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-20 —Å–µ–∫—É–Ω–¥</i>"
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ–Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å caption)
            original_text = ""
            for message in messages:
                text = message.text or message.caption or ""
                if text:
                    original_text = text.strip()
                    break
            
            if not original_text:
                await processing_msg.delete()
                await messages[0].answer(
                    "‚ùå <b>–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–ª—å–±–æ–º–µ</b>\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –∞–ª—å–±–æ–º—É –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞."
                )
                return
            
            if len(original_text) < 3:
                await processing_msg.delete()
                await messages[0].answer(
                    "‚ùå <b>–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>\n\n"
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: 3 —Å–∏–º–≤–æ–ª–∞."
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö
            media_group_info = []
            for i, message in enumerate(messages):
                media_info = content_agent_service.extract_media_info(message)
                if media_info:
                    media_info['position'] = i
                    media_info['message_id'] = message.message_id
                    media_group_info.append(media_info)
            
            # ‚ú® –ù–û–í–û–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
            links_info = {'has_links': False, 'links': {}, 'total_links': 0}
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ content_agent_service
                links_info = content_agent_service.extract_links_from_message(messages[0])
            except Exception as e:
                self.logger.warning("‚ö†Ô∏è Failed to extract links from media group", error=str(e))
            
            self.logger.info("üìä Media group analysis completed with links", 
                           bot_id=self.bot_id,
                           text_length=len(original_text),
                           media_files=len(media_group_info),
                           has_links=links_info['has_links'],
                           total_links=links_info['total_links'])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–π—Ç —á–µ—Ä–µ–∑ ContentManager
            rewrite_result = await content_agent_service.content_manager.process_content_rewrite(
                bot_id=self.bot_id,
                original_text=original_text,
                media_info={
                    'type': 'media_group',
                    'count': len(messages),
                    'files': media_group_info,
                    'media_group_id': messages[0].media_group_id
                },
                links_info=links_info,  # ‚ú® –ù–û–í–û–ï
                user_id=messages[0].from_user.id
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                await processing_msg.delete()
            except:
                pass
            
            if rewrite_result and rewrite_result.get('success'):
                # –£—Å–ø–µ—à–Ω—ã–π —Ä–µ—Ä–∞–π—Ç –∞–ª—å–±–æ–º–∞
                await self._send_media_group_rewrite_result(messages, rewrite_result)
                
                self.logger.info("‚úÖ Media group rewritten successfully with links", 
                               bot_id=self.bot_id,
                               media_count=len(messages),
                               tokens_used=rewrite_result.get('tokens', {}).get('total_tokens', 0),
                               has_links=links_info['has_links'])
            else:
                # –û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞
                await self._send_rewrite_error(messages[0], rewrite_result or {'error': 'unknown'})
                
        except Exception as e:
            self.logger.error("üí• Failed to process media group rewrite with links", 
                            bot_id=self.bot_id,
                            media_group_id=messages[0].media_group_id,
                            error=str(e))
            await messages[0].answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ª—å–±–æ–º–∞")
    
    async def _send_media_group_rewrite_result(self, original_messages: List[Message], result: Dict):
        """üîß –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ—Ä–∞–π—Ç–∞ –∞–ª—å–±–æ–º–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        
        # üîß –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ result
        content = self._safe_get_from_result(result, 'content', {})
        tokens = self._safe_get_from_result(result, 'tokens', {})
        media_info = self._safe_get_from_result(result, 'media_info', {})
        agent_info = self._safe_get_from_result(result, 'agent', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
        if not content or not isinstance(content, dict):
            self.logger.error("‚ùå No content in media group result", 
                             bot_id=self.bot_id,
                             result_keys=list(result.keys()) if isinstance(result, dict) else 'not_dict')
            await original_messages[0].answer(
                "‚ùå <b>–û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ä–∞–π—Ç–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        rewritten_text = content.get('rewritten_text', '–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω')
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ä–∞–π—Ç–∞
            save_success = await content_agent_service.content_manager.save_rewrite_result(
                self.bot_id, result
            )
            
            # ‚ú® –£–ü–†–û–©–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º caption —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            result_caption = rewritten_text
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é MediaGroupBuilder
            media_builder = MediaGroupBuilder(caption=result_caption)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É—è file_id –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            media_added = 0
            for message in original_messages:
                try:
                    if message.photo:
                        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                        largest_photo = max(message.photo, key=lambda x: x.width * x.height)
                        media_builder.add_photo(media=largest_photo.file_id)
                        media_added += 1
                    elif message.video:
                        media_builder.add_video(media=message.video.file_id)
                        media_added += 1
                    elif message.animation:
                        # –î–ª—è GIF –∏—Å–ø–æ–ª—å–∑—É–µ–º add_video (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
                        media_builder.add_video(media=message.animation.file_id)
                        media_added += 1
                except Exception as media_error:
                    self.logger.warning("‚ö†Ô∏è Failed to add media to group", 
                                       bot_id=self.bot_id,
                                       message_id=message.message_id,
                                       error=str(media_error))
            
            if media_added == 0:
                # –ï—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                keyboards = await self._get_content_keyboards()
                await original_messages[0].answer(
                    result_caption, 
                    reply_markup=keyboards['post_actions']
                )
                self.logger.warning("‚ö†Ô∏è No media added to group, sent text only", 
                                   bot_id=self.bot_id)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                media_group = media_builder.build()
                sent_messages = await original_messages[0].answer_media_group(
                    media=media_group
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                keyboards = await self._get_content_keyboards()
                await original_messages[0].answer(
                    "‚ú® <b>–†–µ—Ä–∞–π—Ç –≥–æ—Ç–æ–≤!</b>",
                    reply_markup=keyboards['post_actions']
                )
                
                self.logger.info("‚úÖ Clean media group sent successfully with action buttons", 
                               bot_id=self.bot_id,
                               media_files=media_added)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            self.logger.info("‚úÖ Clean media group rewrite result sent", 
                           bot_id=self.bot_id,
                           agent_name=agent_info.get('name', 'Unknown'),
                           media_files=len(original_messages),
                           tokens_used=tokens.get('total_tokens', 0),
                           original_length=len(content.get('original_text', '')),
                           rewritten_length=len(rewritten_text))
            
        except Exception as e:
            self.logger.error("üí• Failed to send clean media group rewrite result", 
                            bot_id=self.bot_id,
                            error=str(e),
                            error_type=type(e).__name__)
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
            fallback_text = rewritten_text
            
            if len(fallback_text) > 4096:
                fallback_text = fallback_text[:4093] + "..."
            
            keyboards = await self._get_content_keyboards()
            await original_messages[0].answer(
                f"{fallback_text}\n\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {str(e)}",
                reply_markup=keyboards['post_actions']
            )
    
    # ===== RESULT SENDING =====
    
    async def _send_rewrite_result(self, original_message: Message, result: Dict):
        """–ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Ä–µ—Ä–∞–π—Ç–∞"""
        try:
            content = result['content']
            media_info = result.get('media')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—Ä–∞–π—Ç–∞
            save_success = await content_agent_service.content_manager.save_rewrite_result(
                self.bot_id, result
            )
            
            # ‚ú® –£–ü–†–û–©–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            rewritten_text = content['rewritten_text']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboards = await self._get_content_keyboards()
            post_actions_keyboard = keyboards.get('post_actions', keyboards['rewrite_mode'])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –º–µ–¥–∏–∞ –∏–ª–∏ –±–µ–∑
            if media_info:
                await self._send_media_with_text(
                    original_message,
                    rewritten_text,  # ‚ú® –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    media_info,
                    post_actions_keyboard  # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
                )
            else:
                await original_message.answer(
                    rewritten_text,  # ‚ú® –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    reply_markup=post_actions_keyboard  # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            tokens = result['tokens']
            agent_info = result['agent']
            
            self.logger.info("‚úÖ Clean rewrite result sent with action buttons", 
                           bot_id=self.bot_id,
                           agent_name=agent_info['name'],
                           has_media=bool(media_info),
                           tokens_used=tokens['total_tokens'],
                           original_length=len(content['original_text']),
                           rewritten_length=len(content['rewritten_text']))
            
        except Exception as e:
            self.logger.error("üí• Failed to send clean rewrite result", 
                            bot_id=self.bot_id,
                            error=str(e))
            await original_message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ—Ä–∞–π—Ç–∞")
    
    async def _send_rewrite_error(self, original_message: Message, result: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ —Ä–µ—Ä–∞–π—Ç–∞ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        try:
            error_type = result.get('error', 'unknown')
            error_message = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if error_type == 'no_content_agent':
                text = """
‚ùå <b>–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–ö–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ—Ä–∞–π—Ç–∞.
"""
            elif error_type == 'no_text':
                text = """
‚ùå <b>–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>

–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞. –ü—Ä–∏—à–ª–∏—Ç–µ:
‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
‚Ä¢ –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é  
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –ê–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é
"""
            elif error_type == 'text_too_short':
                text = """
‚ùå <b>–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π</b>

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞: 3 —Å–∏–º–≤–æ–ª–∞.
–ü—Ä–∏—à–ª–∏—Ç–µ –±–æ–ª–µ–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç.
"""
            elif error_type == 'token_limit_exceeded':
                tokens_info = result.get('tokens_used', 0)
                tokens_limit = result.get('tokens_limit', 0)
                
                text = f"""
üö´ <b>–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω</b>

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {self._format_number(tokens_info)} / {self._format_number(tokens_limit)}

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã:
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã
‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
"""
            else:
                text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ—Ä–∞–π—Ç–∞</b>

<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_message}

üîß <b>–ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Å—Ç
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""
            
            keyboards = await self._get_content_keyboards()
            
            await original_message.answer(
                text,
                reply_markup=keyboards['rewrite_mode']
            )
            
            self.logger.info("‚úÖ Rewrite error sent", 
                           bot_id=self.bot_id,
                           error_type=error_type)
            
        except Exception as e:
            self.logger.error("üí• Failed to send rewrite error", 
                            bot_id=self.bot_id,
                            error=str(e))
            await original_message.answer("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ —Ä–µ—Ä–∞–π—Ç–∞")
    
    async def _send_media_with_text(self, message: Message, text: str, media_info: Dict, keyboard):
        """‚úÖ –£–ü–†–û–©–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Å –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)"""
        try:
            media_type = media_info['type']
            file_id = media_info['file_id']
            
            if media_type == 'photo':
                await message.answer_photo(
                    photo=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üì∑ Photo sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'video':
                await message.answer_video(
                    video=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üé• Video sent with clean rewrite result", bot_id=self.bot_id)
                
            elif media_type == 'animation':
                await message.answer_animation(
                    animation=file_id,
                    caption=text,  # ‚ú® –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    reply_markup=keyboard
                )
                self.logger.debug("üé¨ Animation sent with clean rewrite result", bot_id=self.bot_id)
                
            else:
                # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
                await message.answer(text, reply_markup=keyboard)
                self.logger.debug("üìÑ Fallback text sent (unsupported media)", 
                                bot_id=self.bot_id, media_type=media_type)
                
        except Exception as e:
            self.logger.error("üí• Failed to send media with clean text", 
                            media_type=media_info.get('type'),
                            error=str(e))
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(text, reply_markup=keyboard)
    
    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ê–ù–ê–õ–û–í –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø =====
    
    async def cb_edit_post(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Ä–∞–π—Ç
            last_rewrite = await content_agent_service.content_manager.get_last_rewrite(self.bot_id)
            
            if not last_rewrite:
                await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
                return
            
            text = """
‚úèÔ∏è <b>–í–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ –≤ –ø–æ—Å—Ç</b>

<b>–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?</b>

–û–ø–∏—à–∏—Ç–µ –∫–∞–∫–∏–µ –ø—Ä–∞–≤–∫–∏ –≤–Ω–µ—Å—Ç–∏:
- "–°–¥–µ–ª–∞—Ç—å —Ç–æ–Ω –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º"
- "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"
- "–£–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ —ç–º–æ–¥–∂–∏"
- "–°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–¥–≤–æ–µ"

<b>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∞–≤–æ–∫:</b>
"""
            
            keyboards = await self._get_content_keyboards()
            
            await callback.message.answer(
                text, 
                reply_markup=keyboards['back_to_rewrite']
            )
            
            if CONTENT_STATES_AVAILABLE:
                await state.set_state(ContentStates.waiting_for_edit_instructions)
                
        except Exception as e:
            self.logger.error("üí• Error starting post edit", error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)
    
    async def handle_edit_instructions_input(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –ø—Ä–∞–≤–æ–∫"""
        if not self._is_owner(message.from_user.id):
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        try:
            edit_instructions = message.text.strip()
            
            if not edit_instructions or len(edit_instructions) < 5:
                await message.answer("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Ä–∞–π—Ç
            last_rewrite = await content_agent_service.content_manager.get_last_rewrite(self.bot_id)
            
            if not last_rewrite:
                await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            processing_msg = await message.answer("‚è≥ –ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–∞–≤–∫–∏...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–∞–≤–æ–∫
            edit_prompt = f"""
–í–Ω–µ—Å–∏ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–∫—Å—Ç:

–ü–†–ê–í–ö–ò: {edit_instructions}

–ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢:
{last_rewrite['content']['rewritten_text']}

–ü—Ä–∏–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω–∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.
"""
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—Ä–∞–π—Ç —Å –ø—Ä–∞–≤–∫–∞–º–∏
            edit_result = await content_agent_service.content_manager.process_content_rewrite(
                bot_id=self.bot_id,
                original_text=edit_prompt,
                media_info=last_rewrite.get('media_info'),
                links_info=last_rewrite.get('links_info'),
                user_id=message.from_user.id
            )
            
            try:
                await processing_msg.delete()
            except:
                pass
            
            if edit_result and edit_result.get('success'):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ—Ä–∞–π—Ç
                await content_agent_service.content_manager.save_rewrite_result(
                    self.bot_id, edit_result
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboards = await self._get_content_keyboards()
                
                if edit_result.get('media'):
                    await self._send_media_with_text(
                        message,
                        edit_result['content']['rewritten_text'],
                        edit_result['media'],
                        keyboards['post_actions']
                    )
                else:
                    await message.answer(
                        edit_result['content']['rewritten_text'],
                        reply_markup=keyboards['post_actions']
                    )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫")
            
            await state.clear()
            
        except Exception as e:
            self.logger.error("üí• Error processing edit instructions", error=str(e))
            await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–æ–∫")
    
    async def cb_publish_post(self, callback: CallbackQuery):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Ä–∞–π—Ç
            channel_info = await content_agent_service.content_manager.get_channel_info(self.bot_id)
            last_rewrite = await content_agent_service.content_manager.get_last_rewrite(self.bot_id)
            
            if not channel_info or not last_rewrite:
                await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
                return
            
            channel_id = channel_info['chat_id']
            rewritten_text = last_rewrite['content']['rewritten_text']
            media_info = last_rewrite.get('media')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ answer –≤–º–µ—Å—Ç–æ edit_text
            await callback.answer("‚è≥ –ü—É–±–ª–∏–∫—É—é –≤ –∫–∞–Ω–∞–ª...", show_alert=True)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            if media_info:
                await self._publish_media_to_channel(channel_id, rewritten_text, media_info)
            else:
                await self.bot_config['bot'].send_message(channel_id, rewritten_text)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ù–æ–≤—ã–π —Ä–µ—Ä–∞–π—Ç", callback_data="content_rewrite")],
                [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
            ])
            
            # –£—Å–ø–µ—à–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            try:
                text = f"""
‚úÖ <b>–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_info['chat_title']}
üìù <b>–¢–µ–∫—Å—Ç:</b> {self._truncate_text(rewritten_text, 150)}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
"""
                await callback.message.answer(text, reply_markup=keyboard)
            except Exception as parse_error:
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                simple_text = f"""
‚úÖ <b>–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª!</b>

üì∫ <b>–ö–∞–Ω–∞–ª:</b> {channel_info['chat_title']}

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
"""
                await callback.message.answer(simple_text, reply_markup=keyboard)
                self.logger.info("‚úÖ Post published but used simplified result message due to HTML parsing error")
            
        except Exception as e:
            self.logger.error("üí• Error publishing post", error=str(e))
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="content_rewrite")],
                [InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="content_main")]
            ])
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª", reply_markup=keyboard)
    
    async def _publish_media_to_channel(self, channel_id: int, text: str, media_info: Dict):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–¥–∏–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            media_type = media_info['type']
            file_id = media_info['file_id']
            bot = self.bot_config['bot']
            
            if media_type == 'photo':
                await bot.send_photo(channel_id, photo=file_id, caption=text)
            elif media_type == 'video':
                await bot.send_video(channel_id, video=file_id, caption=text)
            elif media_type == 'animation':
                await bot.send_animation(channel_id, animation=file_id, caption=text)
            else:
                await bot.send_message(channel_id, text)
                
        except Exception as e:
            self.logger.error("üí• Error publishing media to channel", error=str(e))
            raise
    
    async def cb_exit_rewrite_mode(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ—Ä–∞–π—Ç–∞"""
        self.logger.info("üö™ Exit rewrite mode requested", 
                        user_id=callback.from_user.id,
                        bot_id=self.bot_id)
        
        await callback.answer()
        
        if not self._is_owner(callback.from_user.id):
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        
        try:
            await state.clear()
            
            text = f"""
üö™ <b>–†–µ–∂–∏–º —Ä–µ—Ä–∞–π—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–≥–µ–Ω—Ç–∞!

üìä <b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞
‚Ä¢ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Ä–µ—Ä–∞–π—Ç–∞
‚Ä¢ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏

<b>–ö—É–¥–∞ –ø–µ—Ä–µ–π—Ç–∏?</b>
"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Ä–µ—Ä–∞–π—Ç–∞", callback_data="content_rewrite")],
                [InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º", callback_data="content_manage")],
                [InlineKeyboardButton(text="üìä –ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω—é", callback_data="content_main")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main")]
            ])
            
            await callback.message.edit_text(text, reply_markup=keyboard)
            
            self.logger.info("‚úÖ Rewrite mode exited successfully", 
                           bot_id=self.bot_id,
                           user_id=callback.from_user.id)
            
        except Exception as e:
            self.logger.error("üí• Failed to exit rewrite mode", 
                            bot_id=self.bot_id,
                            error=str(e))
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ—Ä–∞–π—Ç–∞", show_alert=True)
