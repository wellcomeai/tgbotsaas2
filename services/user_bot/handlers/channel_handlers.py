"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞ (–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ò–ò)
"""

import asyncio
import structlog
from datetime import datetime
from aiogram import Dispatcher, F, Bot
from aiogram.types import (
    ChatMemberUpdated, ChatJoinRequest, Message, CallbackQuery,
    ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import IS_MEMBER, IS_NOT_MEMBER, ChatMemberUpdatedFilter, StateFilter
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from services.notifications import send_token_exhausted_notification, send_token_warning_notification
from config import Emoji
from ..states import AISettingsStates
from ..keyboards import UserKeyboards, AIKeyboards
from ..formatters import MessageFormatter

logger = structlog.get_logger()


def register_channel_handlers(dp: Dispatcher, **kwargs):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞"""
    
    db = kwargs['db']
    bot_config = kwargs['bot_config']  # –ò–ó–ú–ï–ù–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    funnel_manager = kwargs['funnel_manager']
    ai_assistant = kwargs.get('ai_assistant')
    user_bot = kwargs.get('user_bot')  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ UserBot
    
    try:
        handler = ChannelHandler(db, bot_config, funnel_manager, ai_assistant, user_bot)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞
        dp.chat_join_request.register(handler.handle_join_request_extended)
        
        dp.chat_member.register(
            handler.handle_chat_member_join,
            ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER)
        )
        
        dp.chat_member.register(
            handler.handle_chat_member_leave,
            ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER)
        )
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        welcome_button_text = bot_config.get('welcome_button_text')
        if welcome_button_text:
            dp.message.register(
                handler.handle_welcome_button_click,
                F.text == welcome_button_text  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            )
            logger.info("Welcome button handler registered", 
                       bot_id=bot_config['bot_id'], 
                       button_text=welcome_button_text)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ò–ò —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π FSMContext
        dp.message.register(
            handler.handle_ai_button_click,
            F.text == "ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò",
            F.chat.type == "private"
        )
        
        # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –ò–ò –∞–≥–µ–Ω—Ç—É
        dp.message.register(
            handler.handle_user_ai_message,
            StateFilter(AISettingsStates.in_ai_conversation),
            F.chat.type == "private"
        )
        
        # ‚úÖ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò
        dp.callback_query.register(
            handler.handle_ai_exit_conversation,
            F.data == "ai_exit_conversation"
        )
        
        logger.info("Channel handlers registered successfully", 
                   bot_id=bot_config['bot_id'])
        logger.info("‚úÖ User AI conversation handlers registered", 
                   bot_id=bot_config['bot_id'])
        
    except Exception as e:
        logger.error("Failed to register channel handlers", 
                    bot_id=kwargs.get('bot_config', {}).get('bot_id', 'unknown'),
                    error=str(e), exc_info=True)
        raise


class ChannelHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–∞"""
    
    def __init__(self, db, bot_config: dict, funnel_manager, ai_assistant, user_bot):
        self.db = db
        self.bot_config = bot_config
        self.bot_id = bot_config['bot_id']
        self.owner_user_id = bot_config['owner_user_id']
        self.funnel_manager = funnel_manager
        self.ai_assistant = ai_assistant
        self.formatter = MessageFormatter()
        self.user_bot = user_bot  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ UserBot
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.bot = bot_config.get('bot')  # –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        self.welcome_message = bot_config.get('welcome_message')
        self.welcome_button_text = bot_config.get('welcome_button_text')
        self.confirmation_message = bot_config.get('confirmation_message')
        self.goodbye_message = bot_config.get('goodbye_message')
        self.goodbye_button_text = bot_config.get('goodbye_button_text')
        self.goodbye_button_url = bot_config.get('goodbye_button_url')
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò –∞–≥–µ–Ω—Ç–∞
        # –£–¥–∞–ª—è–µ–º —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏:
        # self.ai_assistant_id = bot_config.get('ai_assistant_id')
        # self.ai_assistant_settings = bot_config.get('ai_assistant_settings', {})
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.stats = bot_config.get('stats', {})
    
    async def _should_show_ai_button(self, user_id: int) -> bool:
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–∫–∏ –ò–ò —Å–æ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î"""
        try:
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –∞ –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ!
            fresh_config = await self.db.get_ai_config(self.bot_id)
            
            if not fresh_config:
                logger.debug("No AI config found", bot_id=self.bot_id, user_id=user_id)
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ò–ò –≤–∫–ª—é—á–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            ai_enabled = fresh_config.get('enabled', False)
            ai_agent_id = fresh_config.get('agent_id')
            
            has_agent = ai_enabled and bool(ai_agent_id)
            
            logger.debug("üîç AI button visibility check (fresh data)", 
                        user_id=user_id,
                        bot_id=self.bot_id,
                        ai_enabled=ai_enabled,
                        has_agent_id=bool(ai_agent_id),
                        will_show=has_agent)
            
            return has_agent
            
        except Exception as e:
            logger.error("üí• Error checking AI button visibility", 
                        bot_id=self.bot_id, 
                        user_id=user_id, 
                        error=str(e))
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback)
            return False
    
    async def _check_channel_subscription(self, user_id: int, channel_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            if not channel_id:
                return True  # –ï—Å–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–∞–Ω–∞–ª–∞
            member = await self.bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            
            # –ü–æ–¥–ø–∏—Å–∞–Ω –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å: member, administrator, creator
            return member.status in ['member', 'administrator', 'creator']
            
        except Exception as e:
            logger.warning("‚ö†Ô∏è Could not check channel subscription", 
                          user_id=user_id, 
                          channel_id=channel_id, 
                          error=str(e))
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω) - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
            return True
    
    async def _update_stats(self, event_type: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if event_type in ['welcome_sent', 'goodbye_sent', 'confirmation_sent']:
                await self.db.increment_bot_messages(self.bot_id)
        except Exception as e:
            logger.error("Failed to update stats", bot_id=self.bot_id, error=str(e))
    
    async def _start_user_funnel(self, user):
        """–ó–∞–ø—É—Å–∫ –≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            success = await self.funnel_manager.start_user_funnel(self.bot_id, user.id, user.first_name)
            if success:
                self.stats['funnel_starts'] += 1
                logger.info("Funnel started for user", bot_id=self.bot_id, user_id=user.id)
        except Exception as e:
            logger.error("Failed to start funnel", bot_id=self.bot_id, user_id=user.id, error=str(e))
    
    # ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–û–ö–ï–ù–ê–ú–ò =====
    
    async def _check_openai_token_limit(self, user_id: int) -> tuple[bool, str, dict]:
        """
        ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ò–ò –∞–≥–µ–Ω—Ç–∞
        
        Returns:
            tuple: (can_use, message, token_info)
                - can_use: bool - –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
                - message: str - —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - token_info: dict - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö
        """
        try:
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–± –ò–ò –∞–≥–µ–Ω—Ç–µ
            fresh_ai_config = await self.db.get_ai_config(self.bot_id)
            
            if not fresh_ai_config:
                return True, "", {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ OpenAI –∞–≥–µ–Ω—Ç
            ai_type = fresh_ai_config.get('type')
            if ai_type != 'openai':
                return True, "", {}
            
            agent_settings = fresh_ai_config.get('settings', {})
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –∏–∑ –ë–î
            token_info = await self.db.get_user_token_balance(self.owner_user_id)
            
            if not token_info:
                logger.warning("‚ùå No token info found for user", 
                              owner_user_id=self.owner_user_id,
                              bot_id=self.bot_id)
                return False, "‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", {}
            
            tokens_used = token_info.get('total_used', 0)
            tokens_limit = token_info.get('limit', 500000)
            remaining_tokens = tokens_limit - tokens_used
            
            logger.info("üîç Token limit check", 
                       user_id=user_id,
                       bot_id=self.bot_id,
                       tokens_used=tokens_used,
                       tokens_limit=tokens_limit,
                       remaining_tokens=remaining_tokens)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ª–∏ —Ç–æ–∫–µ–Ω—ã
            if remaining_tokens <= 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
                await self._send_token_exhausted_notification(token_info)
                
                return False, f"""
‚ùå <b>–¢–æ–∫–µ–Ω—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã!</b>

–î–ª—è —ç—Ç–æ–≥–æ –ò–ò –∞–≥–µ–Ω—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ç–æ–∫–µ–Ω—ã.
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {tokens_used:,} –∏–∑ {tokens_limit:,}

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
""", token_info
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–ª–∏–∑–∫–∏ –ª–∏ —Ç–æ–∫–µ–Ω—ã –∫ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—é (90%)
            warning_threshold = tokens_limit * 0.9
            if tokens_used >= warning_threshold and not token_info.get('warning_sent', False):
                await self._send_token_warning_notification(token_info)
            
            return True, "", token_info
            
        except Exception as e:
            logger.error("üí• Error checking token limit", 
                        user_id=user_id,
                        bot_id=self.bot_id,
                        error=str(e),
                        exc_info=True)
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤", {}
    
    async def _send_token_exhausted_notification(self, token_info: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if token_info.get('notification_sent', False):
                return
            
            admin_chat_id = token_info.get('admin_chat_id')
            if not admin_chat_id:
                logger.warning("‚ùå No admin_chat_id for token notification", 
                              owner_user_id=self.owner_user_id)
                return
            
            tokens_used = token_info.get('total_used', 0)
            tokens_limit = token_info.get('limit', 500000)
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≥–µ–Ω—Ç–µ
            fresh_ai_config = await self.db.get_ai_config(self.bot_id)
            agent_name = "OpenAI –∞–≥–µ–Ω—Ç"
            if fresh_ai_config and fresh_ai_config.get('settings'):
                agent_name = fresh_ai_config['settings'].get('agent_name', agent_name)
            
            notification_text = f"""
üö® <b>–¢–æ–∫–µ–Ω—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã!</b>

<b>–ë–æ—Ç:</b> @{self.bot_config.get('bot_username', 'unknown')}
<b>–ò–ò –ê–≥–µ–Ω—Ç:</b> {agent_name}

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {tokens_used:,} —Ç–æ–∫–µ–Ω–æ–≤
<b>–õ–∏–º–∏—Ç:</b> {tokens_limit:,} —Ç–æ–∫–µ–Ω–æ–≤

‚ùå <b>–ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b> - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤.
"""
            
            if self.bot:
                await self.bot.send_message(
                    chat_id=admin_chat_id,
                    text=notification_text,
                    parse_mode=ParseMode.HTML
                )
                
                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await self.db.set_token_notification_sent(self.owner_user_id, True)
                
                logger.info("üìß Token exhausted notification sent", 
                           admin_chat_id=admin_chat_id,
                           bot_id=self.bot_id,
                           tokens_used=tokens_used)
            
        except Exception as e:
            logger.error("üí• Failed to send token exhausted notification", 
                        bot_id=self.bot_id,
                        error=str(e))
    
    async def _send_token_warning_notification(self, token_info: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ —Å–∫–æ—Ä–æ–º –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            admin_chat_id = token_info.get('admin_chat_id')
            if not admin_chat_id:
                return
            
            tokens_used = token_info.get('total_used', 0)
            tokens_limit = token_info.get('limit', 500000)
            remaining_tokens = tokens_limit - tokens_used
            usage_percent = (tokens_used / tokens_limit) * 100
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≥–µ–Ω—Ç–µ
            fresh_ai_config = await self.db.get_ai_config(self.bot_id)
            agent_name = "OpenAI –∞–≥–µ–Ω—Ç"
            if fresh_ai_config and fresh_ai_config.get('settings'):
                agent_name = fresh_ai_config['settings'].get('agent_name', agent_name)
            
            notification_text = f"""
‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ: –¢–æ–∫–µ–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è!</b>

<b>–ë–æ—Ç:</b> @{self.bot_config.get('bot_username', 'unknown')}
<b>–ò–ò –ê–≥–µ–Ω—Ç:</b> {agent_name}

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {tokens_used:,} —Ç–æ–∫–µ–Ω–æ–≤ ({usage_percent:.1f}%)
<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {remaining_tokens:,} —Ç–æ–∫–µ–Ω–æ–≤
<b>–õ–∏–º–∏—Ç:</b> {tokens_limit:,} —Ç–æ–∫–µ–Ω–æ–≤

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–∞.
"""
            
            if self.bot:
                await self.bot.send_message(
                    chat_id=admin_chat_id,
                    text=notification_text,
                    parse_mode=ParseMode.HTML
                )
                
                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await self.db.set_token_warning_sent(self.owner_user_id, True)
                
                logger.info("üìß Token warning notification sent", 
                           admin_chat_id=admin_chat_id,
                           bot_id=self.bot_id,
                           usage_percent=usage_percent)
            
        except Exception as e:
            logger.error("üí• Failed to send token warning notification", 
                        bot_id=self.bot_id,
                        error=str(e))
    
    # ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –ö–ê–ù–ê–õ–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =====
    
    async def handle_join_request_extended(self, join_request: ChatJoinRequest):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"""
        try:
            self.stats['join_requests_processed'] += 1
            
            user = join_request.from_user
            
            if user.is_bot:
                logger.info("ü§ñ Skipping bot join request", bot_id=self.bot_id, user_id=user.id)
                return
            
            user_chat_id = getattr(join_request, 'user_chat_id', None)
            if user_chat_id is not None:
                self.stats['user_chat_id_available'] += 1
                target_chat_id = user_chat_id
                contact_method = "user_chat_id"
            else:
                self.stats['user_chat_id_missing'] += 1
                target_chat_id = user.id
                contact_method = "user.id (fallback)"
            
            logger.info(
                "üö™ User join request received", 
                bot_id=self.bot_id,
                user_id=user.id,
                target_chat_id=target_chat_id,
                contact_method=contact_method,
                username=user.username,
                has_welcome_button=bool(self.welcome_button_text)
            )
            
            try:
                await join_request.approve()
                logger.info("‚úÖ Join request approved", bot_id=self.bot_id, user_id=user.id)
            except Exception as e:
                logger.error("‚ùå Failed to approve join request", bot_id=self.bot_id, user_id=user.id, error=str(e))
                return
            
            await asyncio.sleep(0.5)
            
            success = await self._send_welcome_message_with_button(user, target_chat_id, contact_method)
            
            if not success and contact_method == "user_chat_id":
                logger.info("üîÑ Retrying with user.id fallback", bot_id=self.bot_id, user_id=user.id)
                await self._send_welcome_message_with_button(user, user.id, "user.id (retry)")
            
        except Exception as e:
            logger.error("üí• Critical error in join request handler", bot_id=self.bot_id, error=str(e), exc_info=True)
    
    async def handle_chat_member_join(self, chat_member_update: ChatMemberUpdated):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            self.stats['admin_adds_processed'] += 1
            
            user = chat_member_update.new_chat_member.user
            
            if user.is_bot:
                return
            
            logger.info("üë§ User added by admin", bot_id=self.bot_id, user_id=user.id)
            await self._send_welcome_message_cautious(user, user.id)
            
        except Exception as e:
            logger.error("‚ùå Error handling user join via admin", bot_id=self.bot_id, error=str(e))
    
    async def handle_chat_member_leave(self, chat_member_update: ChatMemberUpdated):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
        try:
            user = chat_member_update.old_chat_member.user
            
            if user.is_bot:
                return
            
            logger.info("üö™ User left chat", bot_id=self.bot_id, user_id=user.id)
            await self._send_goodbye_message_with_button(user)
            
        except Exception as e:
            logger.error("‚ùå Error handling user leave", bot_id=self.bot_id, error=str(e))
    
    # ===== ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    async def handle_welcome_button_click(self, message: Message):
        """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            user = message.from_user
            
            logger.info("üîò Welcome button clicked", bot_id=self.bot_id, user_id=user.id)
            
            self.stats['button_clicks'] += 1
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –æ—Ç–≤–µ—Ç...", reply_markup=ReplyKeyboardRemove())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–æ–Ω–∫—É
            await self._start_user_funnel(user)
            
            # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å–æ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            has_agent = await self._should_show_ai_button(user.id)
            
            if self.confirmation_message:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await self._send_confirmation_with_conditional_ai_button(user, message.chat.id, has_agent)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await self._send_default_confirmation_with_conditional_ai_button(user, message.chat.id, has_agent)
                
        except Exception as e:
            logger.error("üí• Error handling welcome button click", bot_id=self.bot_id, error=str(e))
    
    async def handle_ai_button_click(self, message: Message, state: FSMContext):
        """‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–∑–æ–≤–∞ –ò–ò —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            user = message.from_user
            
            # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª (–î–û–ë–ê–í–ò–¢–¨ –í –°–ê–ú–û–ï –ù–ê–ß–ê–õ–û)
            subscription_settings = await self.db.get_subscription_settings(self.bot_id)
            
            if subscription_settings and subscription_settings.get('subscription_check_enabled'):
                channel_id = subscription_settings.get('subscription_channel_id')
                deny_message = subscription_settings.get('subscription_deny_message', 
                                                        '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ò–ò –∞–≥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.')
                
                if channel_id:
                    is_subscribed = await self._check_channel_subscription(user.id, channel_id)
                    
                    if not is_subscribed:
                        logger.info("‚ùå User not subscribed to required channel", 
                                   user_id=user.id, 
                                   channel_id=channel_id,
                                   bot_id=self.bot_id)
                        
                        await message.answer(deny_message, reply_markup=ReplyKeyboardRemove())
                        return
                    
                    logger.info("‚úÖ User subscription verified", 
                               user_id=user.id, 
                               channel_id=channel_id,
                               bot_id=self.bot_id)
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞ —Å–æ —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if not await self._should_show_ai_button(user.id):
                logger.warning("‚ùå AI button clicked but agent not available", 
                              bot_id=self.bot_id, 
                              user_id=user.id)
                await message.answer("‚ùå –ò–ò –∞–≥–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            logger.info("ü§ñ AI button clicked", bot_id=self.bot_id, user_id=user.id)
            
            # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤
            fresh_ai_config = await self.db.get_ai_config(self.bot_id)
            agent_settings = fresh_ai_config.get('settings', {}) if fresh_ai_config else {}
            
            # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è OpenAI –∞–≥–µ–Ω—Ç–æ–≤
            can_use, token_message, token_info = await self._check_openai_token_limit(user.id)
            
            if not can_use:
                logger.warning("‚ùå Token limit exceeded", 
                              bot_id=self.bot_id,
                              user_id=user.id,
                              tokens_used=token_info.get('total_used', 0),
                              tokens_limit=token_info.get('limit', 0))
                
                await message.answer(
                    token_message,
                    reply_markup=ReplyKeyboardRemove()
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            daily_limit = agent_settings.get('daily_limit')
            if daily_limit:
                usage_count = await self.db.get_ai_usage_today(self.bot_id, user.id)
                if usage_count >= daily_limit:
                    await message.answer(
                        f"‚ùå –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω!\n"
                        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {daily_limit} —Å–æ–æ–±—â–µ–Ω–∏–π –ò–ò –∞–≥–µ–Ω—Ç—É –≤ –¥–µ–Ω—å.\n"
                        f"–°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {usage_count}\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.",
                        reply_markup=ReplyKeyboardRemove()
                    )
                    return
            
            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ is_user_conversation
            await state.set_state(AISettingsStates.in_ai_conversation)
            await state.update_data(
                agent_type='openai',
                user_id=user.id,
                bot_id=self.bot_id
            )
            
            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –£–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞—Ç–∫–µ –¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—É–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã!)
            remaining_messages = ""
            if daily_limit:
                usage_count = await self.db.get_ai_usage_today(self.bot_id, user.id)
                remaining = daily_limit - usage_count
                remaining_messages = f"\nüìä –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}"
            
            welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å –ò–ò –∞–≥–µ–Ω—Ç–æ–º!</b>

–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.{remaining_messages}

<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>
"""
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
            ])
            
            await message.answer(welcome_text, reply_markup=keyboard)
            
            logger.info("‚úÖ AI conversation started for user", 
                       bot_id=self.bot_id,
                       user_id=user.id,
                       has_token_info=bool(token_info),
                       daily_limit=daily_limit)
            
        except Exception as e:
            logger.error("üí• Error handling AI button click", bot_id=self.bot_id, error=str(e), exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò.")
    
    # ===== ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–ò–ê–õ–û–ì–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ò–ò =====
    
    async def handle_user_ai_message(self, message: Message, state: FSMContext):
        """‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–Ø 1-2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –ò–ò –∞–≥–µ–Ω—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—Å–µ—Ö"""
        try:
            user = message.from_user
            
            logger.info("üí¨ User message to AI", 
                       bot_id=self.bot_id,
                       user_id=user.id,
                       message_text=message.text[:50])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
            if message.text.lower() in ['/exit', '/stop', '/cancel', '–≤—ã—Ö–æ–¥', '—Å—Ç–æ–ø']:
                await state.clear()
                await message.answer(
                    "üö™ –î–∏–∞–ª–æ–≥ —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return
            
            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            current_state = await state.get_state()
            if current_state != AISettingsStates.in_ai_conversation:
                logger.warning("‚ùå Not in AI conversation state", user_id=user.id)
                return

            logger.info("üí¨ Processing AI message (tokens will be charged)", 
                       bot_id=self.bot_id, user_id=user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞
            if not await self._should_show_ai_button(user.id):
                await message.answer("‚ùå –ò–ò –∞–≥–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                await state.clear()
                return

            # ‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–æ–≤)
            can_use, token_message, token_info = await self._check_openai_token_limit(user.id)
            if not can_use:
                logger.warning("‚ùå Token limit exceeded for user", 
                              bot_id=self.bot_id, user_id=user.id)
                await message.answer(token_message)
                await state.clear()
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
            await message.bot.send_chat_action(message.chat.id, "typing")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            response = await self._get_openai_response_for_user(message, user.id)
            
            if response:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üö™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="ai_exit_conversation")]
                ])
                
                await message.answer(response, reply_markup=keyboard)
                
                logger.info("‚úÖ AI response sent to user", 
                           bot_id=self.bot_id,
                           user_id=user.id,
                           response_length=len(response))
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
        except Exception as e:
            logger.error("üí• Error in user AI message handler", 
                        bot_id=self.bot_id,
                        error=str(e))
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ò–ò.")
    
    async def handle_ai_exit_conversation(self, callback: CallbackQuery, state: FSMContext):
        """‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)"""
        try:
            await callback.answer()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            if state:
                await state.clear()
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.message.edit_text(
                "üö™ –î–∏–∞–ª–æ–≥ —Å –ò–ò –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"ü§ñ –ü–æ–∑–≤–∞—Ç—å –ò–ò\" —Å–Ω–æ–≤–∞."
            )
            
            logger.info("‚úÖ User AI conversation ended", 
                       user_id=callback.from_user.id,
                       bot_id=self.bot_id)
            
        except Exception as e:
            logger.error("üí• Error ending AI conversation", 
                        bot_id=self.bot_id,
                        user_id=callback.from_user.id,
                        error=str(e))
    
    async def _get_openai_response_for_user(self, message: Message, user_id: int) -> str:
        """‚úÖ –ù–û–í–´–ô: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ò–ò
            fresh_ai_config = await self.db.get_ai_config(self.bot_id)
            
            if not fresh_ai_config or fresh_ai_config.get('type') != 'openai':
                logger.error("‚ùå No OpenAI configuration", user_id=user_id)
                return "‚ùå –ò–ò –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            
            agent_id = fresh_ai_config.get('agent_id')
            if not agent_id:
                logger.error("‚ùå No OpenAI agent ID", user_id=user_id)
                return "‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
            can_use, token_message, token_info = await self._check_openai_token_limit(user_id)
            if not can_use:
                return token_message
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings = fresh_ai_config.get('settings', {})
            daily_limit = settings.get('daily_limit')
            if daily_limit:
                usage_count = await self.db.get_ai_usage_today(self.bot_id, user_id)
                if usage_count >= daily_limit:
                    return f"‚ùå –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {usage_count} –∏–∑ {daily_limit} —Å–æ–æ–±—â–µ–Ω–∏–π.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
            
            logger.info("üì° Calling OpenAI for user", 
                       user_id=user_id,
                       agent_id=agent_id[:15])
            
            # –í—ã–∑—ã–≤–∞–µ–º OpenAI API
            try:
                from services.openai_assistant import openai_client
                from services.openai_assistant.models import OpenAIResponsesContext
                
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context = OpenAIResponsesContext(
                    user_id=user_id,
                    user_name=message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                    username=message.from_user.username,
                    bot_id=self.bot_id,
                    chat_id=message.chat.id,
                    is_admin=False
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = await openai_client.send_message(
                    assistant_id=agent_id,
                    message=message.text,
                    user_id=user_id,
                    context=context
                )
                
                if response:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                    try:
                        await self.db.increment_ai_usage(self.bot_id, user_id)
                    except Exception as stats_error:
                        logger.warning("‚ö†Ô∏è Failed to update usage stats", error=str(stats_error))
                    
                    logger.info("‚úÖ OpenAI response for user", 
                               user_id=user_id,
                               response_length=len(response))
                    
                    return response
                else:
                    return "‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
                    
            except ImportError:
                # Fallback –∫–æ–≥–¥–∞ OpenAI —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                logger.warning("üì¶ OpenAI service not available")
                agent_name = settings.get('agent_name', '–ò–ò –ê–≥–µ–Ω—Ç')
                return f"ü§ñ {agent_name}: –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            except Exception as api_error:
                logger.error("üí• OpenAI API error", 
                            user_id=user_id,
                            error=str(api_error))
                return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
        except Exception as e:
            logger.error("üí• Error in _get_openai_response_for_user", 
                        user_id=user_id,
                        error=str(e))
            return "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã."
    
    # ===== ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –£–°–õ–û–í–ù–û–ì–û –ü–û–ö–ê–ó–ê –ö–ù–û–ü–ö–ò –ò–ò =====
    
    async def _send_confirmation_with_conditional_ai_button(self, user, chat_id: int, has_agent: bool):
        """‚úÖ –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ò–ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –µ—Å—Ç—å"""
        if not self.confirmation_message:
            return
        
        try:
            formatted_message = self.formatter.format_message(self.confirmation_message, user)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∞–≥–µ–Ω—Ç–∞
            if has_agent:
                keyboard = UserKeyboards.ai_button()
                logger.debug("‚úÖ Showing AI button with confirmation", 
                            bot_id=self.bot_id, 
                            user_id=user.id)
            else:
                keyboard = ReplyKeyboardRemove()
                logger.debug("‚ùå No AI button - agent not available", 
                            bot_id=self.bot_id, 
                            user_id=user.id)
            
            if self.bot:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=formatted_message,
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )
                
                self.stats['confirmation_sent'] += 1
                await self._update_stats('confirmation_sent')
            
        except Exception as e:
            logger.error("üí• Failed to send confirmation with conditional AI button", bot_id=self.bot_id, error=str(e))
    
    async def _send_default_confirmation_with_conditional_ai_button(self, user, chat_id: int, has_agent: bool):
        """‚úÖ –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –ò–ò —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –µ—Å—Ç—å"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∞–≥–µ–Ω—Ç–∞
            if has_agent:
                keyboard = UserKeyboards.ai_button()
                logger.debug("‚úÖ Showing AI button with default confirmation", 
                            bot_id=self.bot_id, 
                            user_id=user.id)
            else:
                keyboard = ReplyKeyboardRemove()
                logger.debug("‚ùå No AI button - agent not available", 
                            bot_id=self.bot_id, 
                            user_id=user.id)
            
            if self.bot:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text="‚úÖ –°–ø–∞—Å–∏–±–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                    reply_markup=keyboard
                )
            
        except Exception as e:
            logger.error("üí• Failed to send default confirmation with conditional AI button", error=str(e))
    
    # ===== –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô =====
    
    async def _send_welcome_message_with_button(self, user, target_chat_id: int, contact_method: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π"""
        if not self.welcome_message:
            logger.debug("No welcome message configured", bot_id=self.bot_id)
            return True
        
        self.stats['total_attempts'] += 1
        
        try:
            formatted_message = self.formatter.format_message(self.welcome_message, user)
            
            reply_markup = None
            if self.welcome_button_text:
                reply_markup = UserKeyboards.welcome_button(self.welcome_button_text)
                self.stats['welcome_buttons_sent'] += 1
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if self.bot:
                sent_message = await self.bot.send_message(
                    chat_id=target_chat_id,
                    text=formatted_message,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
                
                self.stats['welcome_sent'] += 1
                await self._update_stats('welcome_sent')
                
                logger.info("‚úÖ Welcome message sent", 
                           bot_id=self.bot_id, user_id=user.id, has_button=bool(reply_markup))
                return True
            
        except TelegramForbiddenError:
            self.stats['welcome_blocked'] += 1
            return False
        except Exception as e:
            logger.error("üí• Failed to send welcome message", bot_id=self.bot_id, error=str(e))
            return False
    
    async def _send_welcome_message_cautious(self, user, target_chat_id: int):
        """–û—Å—Ç–æ—Ä–æ–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        if not self.welcome_message:
            return
        
        try:
            formatted_message = self.formatter.format_message(self.welcome_message, user)
            
            if self.bot:
                await self.bot.send_message(
                    chat_id=target_chat_id,
                    text=formatted_message,
                    parse_mode=ParseMode.HTML
                )
                
                self.stats['welcome_sent'] += 1
                await self._update_stats('welcome_sent')
            
        except TelegramForbiddenError:
            self.stats['welcome_blocked'] += 1
        except Exception as e:
            logger.error("üí• Failed to send message to admin-added user", bot_id=self.bot_id, error=str(e))
    
    async def _send_goodbye_message_with_button(self, user):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π"""
        if not self.goodbye_message:
            return
        
        try:
            formatted_message = self.formatter.format_message(self.goodbye_message, user)
            
            reply_markup = None
            if self.goodbye_button_text and self.goodbye_button_url:
                reply_markup = UserKeyboards.goodbye_button(
                    self.goodbye_button_text,
                    self.goodbye_button_url
                )
                self.stats['goodbye_buttons_sent'] += 1
            
            if self.bot:
                await self.bot.send_message(
                    chat_id=user.id,
                    text=formatted_message,
                    parse_mode=ParseMode.HTML,
                    reply_markup=reply_markup
                )
                
                self.stats['goodbye_sent'] += 1
                await self._update_stats('goodbye_sent')
            
        except TelegramForbiddenError:
            self.stats['goodbye_blocked'] += 1
        except Exception as e:
            logger.error("üí• Failed to send goodbye message", bot_id=self.bot_id, error=str(e))
